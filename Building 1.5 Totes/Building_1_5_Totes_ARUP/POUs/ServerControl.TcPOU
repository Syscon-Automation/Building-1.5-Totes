<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="ServerControl" Id="{c51e2ab7-b59f-4ad1-9a3c-5084036d7114}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM ServerControl
VAR_INPUT
	TxMessage			: 	STRING(55);
	TransmitTrigger 	: 	BOOL;
END_VAR
VAR
	{attribute 'OPC.UA.DA' := '1'}
	bInitialize			: 	BOOL := TRUE;

	nIndexInit			:	UDINT;
	nCurrentServerIndex	:	UDINT := 1;			// Index of the currently communicating server, initialize to the first server instance

	sSrvNetID			: 	T_AmsNetID	:= '';		// TwinCAT TCP/IP server AMS network address
	fbServer			: 	FB_Server ;
	fbCloseAll			: 	FB_SocketCloseAll;
	aTransmitTrigger	: 	ARRAY [1..ServerControl.MAX_CLIENT_CONNECTIONS] OF BOOL;
	{attribute 'OPC.UA.DA' := '1'}
	aEnable				: 	ARRAY [1..ServerControl.MAX_CLIENT_CONNECTIONS] OF BOOL;			// TRUE => Enable server data exchange, FALSE => Disable
	aLog				: 	ARRAY [1..ServerControl.MAX_CLIENT_CONNECTIONS] OF BOOL;					// TRUE => Enable message/error log, FALSE => Disable
END_VAR

VAR CONSTANT	
	MAX_CLIENT_CONNECTIONS					: UDINT(1..20) := 1;	// Possible number of client connections
	PLCPRJ_BUFFER_SIZE						: UDINT := 1000;		// Max. internal fifo/receiver buffer size
	PLCPRJ_RECEIVE_POLLING_TIME				: TIME := T#100MS;
	PLCPRJ_RECEIVE_TIMEOUT					: TIME := T#15M;		// Timeout if no data is received

	// Project specific error codes
	PLCPRJ_ERROR_RECEIVE_TIMEOUT			: UDINT := 16#8101;		// Receive timeout
	PLCPRJ_ERROR_SENDFIFO_OVERFLOW			: UDINT := 16#8102;		// Send fifo overflow
	PLCPRJ_ERROR_RECFIFO_OVERFLOW			: UDINT := 16#8103;		// Receive fifo overflow
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[GVL_Logging.nServerLogEnable:= 1073741823;	
(* On PLC reset or program download close all created/opened sockets/connections *)
fbCloseAll( sSrvNetID := sSrvNetID, bExecute:= bInitialize );
IF fbCloseAll.bBusy OR fbCloseAll.bError THEN
	RETURN;
END_IF

IF bInitialize then
	// Setup Server data, Own IP, communicating port, logging prefix
	fbServer.sLocalHost := '0.0.0.0';
	fbServer.nLocalPort := 49200;
	fbServer.sPrefix := 'SERVER::';
end_if

bInitialize := FALSE;

// Allow the logs to be turned on/off
// And set the Server enables
// Filter by nIndexInit to disable/enable specific Server instances
FOR nIndexInit:= 1 TO MAX_CLIENT_CONNECTIONS DO
	aLog[nIndexInit] := .nServerLogEnable.BUFFER_LOG;
	aEnable[nIndexInit] := TRUE;
END_FOR

// Identify the trigger to use for sending
aTransmitTrigger[nCurrentServerIndex] := TransmitTrigger;

// Call the server block
fbServer( TxMessage := TxMessage, aTransmitTrigger := aTransmitTrigger, sSrvNetID := sSrvNetID, aEnable := aEnable, aLog := aLog
		, nServerIndex => nCurrentServerIndex);

MsgControl(nConnectionIndex := nCurrentServerIndex);		// Control the messages being sent out via TCP/IP
]]></ST>
    </Implementation>
    <LineIds Name="ServerControl">
      <LineId Id="20" Count="0" />
      <LineId Id="257" Count="29" />
      <LineId Id="129" Count="0" />
      <LineId Id="287" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>