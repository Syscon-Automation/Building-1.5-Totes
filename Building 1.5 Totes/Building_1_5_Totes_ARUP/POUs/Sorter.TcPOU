<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="Sorter" Id="{efb4f521-b93c-401a-8a07-5bbe9c018238}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Sorter
VAR
	nSorterClearIdx				: DINT;
	bSimulate					: BOOL := FALSE;	// Indicates when runing a simulation
//----------------------------------------P2140--------------------------------------------------------------	
	st_ToInduct_P2140					: ST_ItemTemporary;	// This is the next item to be inducted onto the sorter
	st_Inducting_P2140				: ST_ItemTemporary;	// This is the next item to be inducted onto the sorter
	st_InductUpdate_P2140				: ST_ItemTemporary;	// This is to update an item already being inducted
	st_Sorter_P2140					: ST_Sorter;
	aSorterDiverts_P2140 				: ARRAY[DIVERTMIN_P2140..NUMBEROFDIVERTS_P2140] OF ST_Divert;

	st_SorterEncoder_P2140 			: ST_Encoder;
	fb_SorterEncoder_P2140 			: FB_ProcessEncoder;

	tEncoderOK_P2140			: TON;
	nLastEncoderCount_P2140	: UDINT;

	fb_CommissionSorterDiverts_P2140	: FB_DivertCommission;
	st_TempItem_P2140					: ST_ItemTemporary;	// Store temporary Item info until BCR data is received
	SorterDischargeItem_P2140			: ST_Item;	// Last Item discharged from the end of the sorter

	DivertToCommission_P2140			: UINT := 0;	// Non-zero value will send all items to this divert

	P2140_SorterLog				:	FB_SorterLog;
	P2140_DivertLog				:	FB_DivertLog;	

	sMessage			: STRING;

	ClearSorterArray	: BOOL;
//----------------------------------------P2150--------------------------------------------------------------	
	st_ToInduct_P2150					: ST_ItemTemporary;	// This is the next item to be inducted onto the sorter
	st_Inducting_P2150				: ST_ItemTemporary;	// This is the next item to be inducted onto the sorter
	st_InductUpdate_P2150				: ST_ItemTemporary;	// This is to update an item already being inducted
	st_Sorter_P2150					: ST_Sorter;
	aSorterDiverts_P2150 				: ARRAY[DIVERTMIN_P2150..NUMBEROFDIVERTS_P2150] OF ST_Divert;

	st_SorterEncoder_P2150 			: ST_Encoder;
	fb_SorterEncoder_P2150 			: FB_ProcessEncoder;

	tEncoderOK_P2150			: TON;
	nLastEncoderCount_P2150	: UDINT;

	fb_CommissionSorterDiverts_P2150	: FB_DivertCommission;

	st_TempItem_P2150					: ST_ItemTemporary;	// Store temporary Item info until BCR data is received
	SorterDischargeItem_P2150			: ST_Item;	// Last Item discharged from the end of the sorter

	DivertToCommission_P2150			: UINT := 0;	// Non-zero value will send all items to this divert

	P2150_SorterLog				:	FB_SorterLog;
	P2150_DivertLog				:	FB_DivertLog;	
END_VAR

VAR PERSISTENT
//----------------------------------------P2140--------------------------------------------------------------		
	aSorterItems_P2140 				: ARRAY[SORTERENCODERMIN_P2140..SORTERENCODERMAX_P2140] OF ST_Item;	// Persist the Items to Sort array
	st_Sorter_P2140Cfg				: ST_SorterConfig; 	// Persist Sorter configuration
	aSorterDiverts_P2140Cfgs 		: ARRAY[DIVERTMIN_P2140..NUMBEROFDIVERTS_P2140] OF ST_DivertCfg; 	// Persist Sorter Configuration
//----------------------------------------P2150--------------------------------------------------------------		
	aSorterItems_P2150 				: ARRAY[SORTERENCODERMIN_P2150..SORTERENCODERMAX_P2150] OF ST_Item;	// Persist the Items to Sort array
	st_Sorter_P2150Cfg				: ST_SorterConfig; 	// Persist Sorter configuration
	aSorterDiverts_P2150Cfgs 		: ARRAY[DIVERTMIN_P2150..NUMBEROFDIVERTS_P2150] OF ST_DivertCfg; 	// Persist Sorter Configuration
END_VAR

VAR CONSTANT
//----------------------------------------P2140--------------------------------------------------------------	
	SORTERMASKSIZE_P2140				: UINT := 11;		// Number of bits to mask into the Encoder Count, will define the size of the SORTERENCODERMAX value
	{attribute 'OPC.UA.DA' := '1'}
	NUMBEROFDIVERTS_P2140				: DINT := 2;
	DIVERTMIN_P2140					: DINT := 1;
	{attribute 'OPC.UA.DA' := '1'}
	SORTERENCODERMAX_P2140			: UDINT := ((LREAL_TO_UDINT(EXPT(2,SORTERMASKSIZE_P2140)))-1); // Calculated size based on the bitmask 
	{attribute 'OPC.UA.DA' := '1'}
	SORTERENCODERMIN_P2140			: UDINT := 0;
//----------------------------------------P2150--------------------------------------------------------------	
	SORTERMASKSIZE_P2150				: UINT := 11;		// Number of bits to mask into the Encoder Count, will define the size of the SORTERENCODERMAX value
	{attribute 'OPC.UA.DA' := '1'}
	NUMBEROFDIVERTS_P2150				: DINT := 5;
	DIVERTMIN_P2150					: DINT := 1;
	{attribute 'OPC.UA.DA' := '1'}
	SORTERENCODERMAX_P2150			: UDINT := ((LREAL_TO_UDINT(EXPT(2,SORTERMASKSIZE_P2150)))-1); // Calculated size based on the bitmask 
	{attribute 'OPC.UA.DA' := '1'}
	SORTERENCODERMIN_P2150			: UDINT := 0;
	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Sorter clear when the system is restarted or downloaded (INIT=TRUE for first scan)
IF (GVL_IO.INIT AND NOT st_Sorter_P2140Cfg.RetainOnRestart) OR ClearSorterArray THEN
	FOR nSorterClearIdx := UDINT_TO_DINT(SORTERENCODERMIN_P2140) TO UDINT_TO_DINT(SORTERENCODERMAX_P2140) BY 1 DO
		IF nSorterLogEnable.SORTER_DUMP THEN
			IF aSorterItems_P2140[nSorterClearIdx].ID <> '' THEN
				IF .nSorterLogEnable.SORTER_DUMP THEN
					sMessage := CONCAT(' Item: ', aSorterItems_P2140[nSorterClearIdx].ID);
					sMessage := CONCAT(sMessage,' Index: ');
					sMessage := CONCAT(sMessage, DINT_TO_STRING(nSorterClearIdx));
					// Write to the Error List
					ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG
						, msgFmtStr := 'P2140 Array Dump Info: %s'
						, strArg := sMessage);
				END_IF
			END_IF
		END_IF
		aSorterItems_P2140[nSorterClearIdx] := BlankItem;
	END_FOR
	ClearSorterArray := FALSE;
END_IF

// Setup and process the Sorter Encoder
st_SorterEncoder_P2140.EncoderRawCount := GVL_IO.ENC_9031_Raw;
st_SorterEncoder_P2140.BitMaskSize := SORTERMASKSIZE_P2140;
fb_SorterEncoder_P2140(Encoder := st_SorterEncoder_P2140, Simulate := bSimulate);
(*
	Initialize Diverts here. 
	Tie variables commented IO to physical IO address
*)
//Divert #1
aSorterDiverts_P2140[1].Config := aSorterDiverts_P2140Cfgs[1];
aSorterDiverts_P2140[1].ConfirmPE := Photoeyes.PE_10091.Out; 			
aSorterDiverts_P2140[1].FullPE := Photoeyes.PE_10091.Out;   			

//Divert #2
aSorterDiverts_P2140[2].Config := aSorterDiverts_P2140Cfgs[2];
aSorterDiverts_P2140[2].ConfirmPE := Photoeyes.PE_10302.Out; 		
aSorterDiverts_P2140[2].FullPE := Photoeyes.PE_10302.Out;   		

fb_CommissionSorterDiverts_P2140(
			InductTrigger := Photoeyes.PE_10081.Out,
			ReferenceValue := st_SorterEncoder_P2140.CurrentCount, 
			DischargeTrigger := Photoeyes.PE_10091.Out_OffFltrd,
			TestTime := T#10S, Diverts := aSorterDiverts_P2140);

// Provide a "hard-coded" default destination.
IF st_Sorter_P2140Cfg.DefaultDestination <= 0 THEN
	st_Sorter_P2140Cfg.DefaultDestination := 1;
END_IF						

// Check for a changed Default Destination from the messaging
IF P2140_DefaultDestination <> 0
   AND P2140_DefaultDestination <> st_Sorter_P2140Cfg.DefaultDestination
   THEN
   	st_Sorter_P2140Cfg.DefaultDestination := DINT_TO_UINT(P2140_DefaultDestination);
END_IF

// Name of the sorter equipment
//st_SorterCfg.Name := Conveyors.cfgP8005Label;
st_Sorter_P2140Cfg.DivertCount := NUMBEROFDIVERTS_P2140;
IF DivertToCommission_P2140 > 0 THEN
	st_Sorter_P2140Cfg.DefaultDestination := DivertToCommission_P2140;
END_IF
st_Sorter_P2140.EncoderCounts := st_SorterEncoder_P2140.CurrentCount;
st_Sorter_P2140.InductPE := PhotoEyes.PE_10081.Out_OnFltrd;
st_Sorter_P2140.DischargePE := Photoeyes.PE_10091.Out_OnFltrd;

// Test the Encoder
tEncoderOK_P2140.IN := (Conveyors.P2140_Status.Sts_IsRunning AND (st_Sorter_P2140.EncoderCounts = nLastEncoderCount_P2140));
tEncoderOK_P2140(PT:=T#1S);

// OK when Q is not on, but the alarm is reversed
  GVL_IO.ENC_9091_OK := tEncoderOK_P2140.Q;

// Sorter
(*
	ProcessBuffers processes all associated buffers (Sorter/Divert/Arrival/Transport/Update)
	Items arriving at the sorter are detected and processed in this function block then deliverd to the SorterProgram
	Items inducted into sorter produce TransportResponse messages in this function block
	Items diverted off the sorter produce TransportComplete messages in this function block
*)
ProcessBuffers_P2140(st_NextToInduct := st_ToInduct_P2140
				, st_TempInductItem := st_TempItem_P2140
				, st_UpdateItem := st_Inducting_P2140
				, st_Sorter := st_Sorter_P2140
				, aDiverts := aSorterDiverts_P2140
				, aItems := aSorterItems_P2140
				, DivertToCommission := DivertToCommission_P2140
				,ItemsArrayMin := SORTERENCODERMIN_P2140
				,ItemsArrayMax := SORTERENCODERMAX_P2140);

// Sorter LOG logs induct/discharge PE's and prepares the Temporory Record for unidentified items
P2140_SorterLog(
				SorterToLog := st_Sorter_P2140,
				SorterLogEnable := .nSorterLogEnableP2140,
				ToInduct := st_ToInduct_P2140,
				TempItem => st_TempItem_P2140);
(*
	SorterProgram is a separate Program
	Config portion of the st_sorter is separate to allow it be be persistent.
*)
st_sorter_P2140.Config := st_sorter_P2140Cfg;
Sorter_P2140(st_Sorter := st_Sorter_P2140
		, In_ItemToInduct := st_ToInduct_P2140.Item
		, In_InductingItem := st_Inducting_P2140.Item
		, aItems := aSorterItems_P2140
		, aDiverts := aSorterDiverts_P2140
		, st_tempItem := st_TempItem_P2140
		, ItemsArrayMax := SORTERENCODERMAX_P2140
		, ItemsArrayMin := SORTERENCODERMIN_P2140
		, DivertArrayMax := DIVERTMIN_P2140
		, DivertArrayMin := NUMBEROFDIVERTS_P2140
		, st_DischargeItem => SorterDischargeItem_P2140);

// Log the diverts
P2140_DivertLog(DivertArray := aSorterDiverts_P2140,
				DivertLogEnable := .nDivertLogEnableP2140,
				EncoderCounts := st_SorterEncoder_P2140.CurrentCount);

//--------------------------------------Sorter P2150------------------------------------------	

// Sorter clear when the system is restarted or downloaded (INIT=TRUE for first scan)
IF (GVL_IO.INIT AND NOT st_Sorter_P2150Cfg.RetainOnRestart) OR ClearSorterArray THEN
	FOR nSorterClearIdx := UDINT_TO_DINT(SORTERENCODERMIN_P2150) TO UDINT_TO_DINT(SORTERENCODERMAX_P2150) BY 1 DO
		IF nSorterLogEnable.SORTER_DUMP THEN
			IF aSorterItems_P2150[nSorterClearIdx].ID <> '' THEN
				IF .nSorterLogEnable.SORTER_DUMP THEN
					sMessage := CONCAT(' Item: ', aSorterItems_P2150[nSorterClearIdx].ID);
					sMessage := CONCAT(sMessage,' Index: ');
					sMessage := CONCAT(sMessage, DINT_TO_STRING(nSorterClearIdx));
					// Write to the Error List
					ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG
						, msgFmtStr := 'P2150 Array Dump Info: %s'
						, strArg := sMessage);
				END_IF
			END_IF
		END_IF
		aSorterItems_P2150[nSorterClearIdx] := BlankItem;
	END_FOR
	ClearSorterArray := FALSE;
END_IF

// Setup and process the Sorter Encoder
st_SorterEncoder_P2150.EncoderRawCount := GVL_IO.ENC_9091_Raw;
st_SorterEncoder_P2150.BitMaskSize := SORTERMASKSIZE_P2150;
fb_SorterEncoder_P2150(Encoder := st_SorterEncoder_P2150, Simulate := bSimulate);

(*
	Initialize Diverts here. 
	Tie variables commented IO to physical IO address
*)

//Divert #1
aSorterDiverts_P2150[1].Config := aSorterDiverts_P2150Cfgs[1];
aSorterDiverts_P2150[1].ConfirmPE := Photoeyes.PE_3231.Out; 			
aSorterDiverts_P2150[1].FullPE := Photoeyes.PE_3231.Out;   			

//Divert #2
aSorterDiverts_P2150[2].Config := aSorterDiverts_P2150Cfgs[2];
aSorterDiverts_P2150[2].ConfirmPE := Photoeyes.PE_3111.Out; 		
aSorterDiverts_P2150[2].FullPE := Photoeyes.PE_3111.Out;   		

//Divert #3 
aSorterDiverts_P2150[3].Config := aSorterDiverts_P2150Cfgs[3];
aSorterDiverts_P2150[3].ConfirmPE := Photoeyes.PE_4201.Out; 		
aSorterDiverts_P2150[3].FullPE := Photoeyes.PE_4201.Out;   	

//Divert #4 
aSorterDiverts_P2150[4].Config := aSorterDiverts_P2150Cfgs[4];
aSorterDiverts_P2150[4].ConfirmPE := Photoeyes.PE_4091.Out; 		
aSorterDiverts_P2150[4].FullPE := Photoeyes.PE_4091.Out; 

//Divert #5
aSorterDiverts_P2150[5].Config := aSorterDiverts_P2150Cfgs[5];
aSorterDiverts_P2150[5].ConfirmPE := Photoeyes.PE_4161.Out; 		
aSorterDiverts_P2150[5].FullPE := Photoeyes.PE_4161.Out; 	

fb_CommissionSorterDiverts_P2150(
			InductTrigger := Photoeyes.PE_2131.Out,
			ReferenceValue := st_SorterEncoder_P2150.CurrentCount, 
			DischargeTrigger := Photoeyes.PE_4161.Out_OffFltrd,
			TestTime := T#10S, Diverts := aSorterDiverts_P2150);

// Provide a "hard-coded" default destination.
IF st_Sorter_P2150Cfg.DefaultDestination <= 0 THEN
	st_Sorter_P2150Cfg.DefaultDestination := 5;
END_IF						

// Check for a changed Default Destination from the messaging
IF P2150_DefaultDestination <> 0
   AND P2150_DefaultDestination <> st_Sorter_P2150Cfg.DefaultDestination
   THEN
   	st_Sorter_P2150Cfg.DefaultDestination := DINT_TO_UINT(P2150_DefaultDestination);
END_IF

// Name of the sorter equipment
//st_SorterCfg.Name := Conveyors.cfgP8005Label;
st_Sorter_P2150Cfg.DivertCount := NUMBEROFDIVERTS_P2150;
IF DivertToCommission_P2150 > 0 THEN
	st_Sorter_P2150Cfg.DefaultDestination := DivertToCommission_P2150;
END_IF
st_Sorter_P2150.EncoderCounts := st_SorterEncoder_P2150.CurrentCount;
st_Sorter_P2150.InductPE := PhotoEyes.PE_2131.Out_OnFltrd;
st_Sorter_P2150.DischargePE := Photoeyes.PE_4161.Out_OnFltrd;

// Test the Encoder
tEncoderOK_P2150.IN := (Conveyors.P2150_Status.Sts_IsRunning AND (st_Sorter_P2150.EncoderCounts = nLastEncoderCount_P2150));
tEncoderOK_P2150(PT:=T#1S);

// OK when Q is not on, but the alarm is reversed
  GVL_IO.ENC_9031_OK := tEncoderOK_P2150.Q;

// Sorter
(*
	ProcessBuffers processes all associated buffers (Sorter/Divert/Arrival/Transport/Update)
	Items arriving at the sorter are detected and processed in this function block then deliverd to the SorterProgram
	Items inducted into sorter produce TransportResponse messages in this function block
	Items diverted off the sorter produce TransportComplete messages in this function block
*)
ProcessBuffers_P2150(st_NextToInduct := st_ToInduct_P2150
				, st_TempInductItem := st_TempItem_P2150
				, st_UpdateItem := st_Inducting_P2150
				, st_Sorter := st_Sorter_P2150
				, aDiverts := aSorterDiverts_P2150
				, aItems := aSorterItems_P2150
				, DivertToCommission := DivertToCommission_P2150
				,ItemsArrayMin := SORTERENCODERMIN_P2150
				,ItemsArrayMax := SORTERENCODERMAX_P2150);

// Sorter log logs induct/discharge PE's and prepares the Temporory Record for unidentified items
P2150_SorterLog(
				SorterToLog := st_Sorter_P2150,
				SorterLogEnable := .nSorterLogEnableP2150,
				ToInduct := st_ToInduct_P2150,
				TempItem => st_TempItem_P2150);


(*
	SorterProgram is a separate Program
	Config portion of the st_sorter is separate to allow it be be persistent.
*)
st_sorter_P2150.Config := st_sorter_P2150Cfg;
Sorter_P2140(st_Sorter := st_Sorter_P2150
		, In_ItemToInduct := st_ToInduct_P2150.Item
		, In_InductingItem := st_Inducting_P2150.Item
		, aItems := aSorterItems_P2140
		, aDiverts := aSorterDiverts_P2140
		, st_tempItem := st_TempItem_P2150
		, ItemsArrayMax := SORTERENCODERMAX_P2150
		, ItemsArrayMin := SORTERENCODERMIN_P2150
		, DivertArrayMax := DIVERTMIN_P2150
		, DivertArrayMin := NUMBEROFDIVERTS_P2150
		, st_DischargeItem => SorterDischargeItem_P2150);

// Log the diverts
P2150_DivertLog(DivertArray := aSorterDiverts_P2150,
				DivertLogEnable := .nDivertLogEnableP2150,
				EncoderCounts := st_SorterEncoder_P2150.CurrentCount);
]]></ST>
    </Implementation>
    <LineIds Name="Sorter">
      <LineId Id="593" Count="24" />
      <LineId Id="1343" Count="3" />
      <LineId Id="1333" Count="9" />
      <LineId Id="619" Count="10" />
      <LineId Id="1347" Count="6" />
      <LineId Id="630" Count="16" />
      <LineId Id="650" Count="12" />
      <LineId Id="1354" Count="1" />
      <LineId Id="663" Count="1" />
      <LineId Id="1356" Count="5" />
      <LineId Id="710" Count="9" />
      <LineId Id="1368" Count="4" />
      <LineId Id="720" Count="0" />
      <LineId Id="1379" Count="0" />
      <LineId Id="1375" Count="3" />
      <LineId Id="1206" Count="1" />
      <LineId Id="926" Count="26" />
      <LineId Id="1380" Count="29" />
      <LineId Id="953" Count="10" />
      <LineId Id="1410" Count="6" />
      <LineId Id="964" Count="16" />
      <LineId Id="984" Count="12" />
      <LineId Id="1417" Count="1" />
      <LineId Id="997" Count="1" />
      <LineId Id="1419" Count="5" />
      <LineId Id="1426" Count="0" />
      <LineId Id="1043" Count="10" />
      <LineId Id="1427" Count="4" />
      <LineId Id="1054" Count="0" />
      <LineId Id="1432" Count="4" />
      <LineId Id="99" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>