<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="ProcessBuffers_P2140" Id="{48821c70-aef6-4001-a4d0-b0777e6eb577}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM ProcessBuffers_P2140
VAR_IN_OUT
	st_NextToInduct					: ST_ItemTemporary;
	st_UpdateItem					: ST_ItemTemporary;
	st_TempInductItem				: ST_ItemTemporary;
	st_Sorter						: ST_Sorter;
	aDiverts						: ARRAY[Sorter.DIVERTMIN_P2140..Sorter.NUMBEROFDIVERTS_P2140] OF ST_DIVERT;
	aItems 							: ARRAY[Sorter.SORTERENCODERMIN_P2140..Sorter.SORTERENCODERMAX_P2140] OF ST_Item;
END_VAR

VAR_INPUT
	DivertToCommission				: DINT;
END_VAR
VAR
	st_ArrivalBuffer AT %I* 		: ST_ItemBuffer;
	st_ArrivalFdbkIn				: ST_ItemBufferFdbk;
	st_ArrivalFdbkOut	AT %Q*		: ST_ItemBufferFdbk;
	fb_ArrivalBuffer				: FB_ItemBuffer;
	st_ArrivalItem 					: ST_Item;		// Arrival Item (Bar code read) from System PLC (BarCodeReaders.pou)

	// Item to replace in the sorter buffer
	st_ReplaceItem					: st_Item;

	st_TransportBuffer AT %I* 		: ST_ItemBuffer;
	st_TransportFdbkIn				: ST_ItemBufferFdbk;
	st_TransportFdbkOut	AT %Q*		: ST_ItemBufferFdbk;
	fb_TransportBuffer				: FB_ItemBuffer;

	st_UpdateBuffer AT %Q* 			: ST_ItemBuffer;
	st_UpdateFdbkIn	AT %I*			: ST_ItemBufferFdbk;
	st_UpdateFdbkOut				: ST_ItemBufferFdbk;
	fb_UpdateBuffer 				: FB_ItemBuffer;

	st_ToUpdate						: ST_ItemTemporary;	// Item to Update on the Sorter, or waiting to be added to the sorter

	ItemsArrayMax 			: UDINT;
	ItemsArrayMin 			: UDINT;
	ItemsArraySize			: UDINT;

	TransportItemInSorter	: ST_Item;	// Temporary Processing Item
	TransportItemFound		: ST_Item;	// Item to Update Found
	TransportSorterIndex	: UDINT;

	ExitSorterIndex			: UDINT;
	ExitItemInSorter		: ST_Item;
	ExitItemFound			: ST_ItemTemporary;
	ExitInDivert			: BOOL;
	ExitDiverting			: BOOL;
	ExitSuccess				: BOOL;
	ExitDetected			: BOOL;
	ExitComplete			: BOOL;

	UpdateIndexCounter		: DINT;

	BlankItem					: ST_Item := (ID := ''
												, UniqueID := 0
												, Destination := 0
												, Status := E_StatusCode.No_Status
												, ExtStatus := E_StatusCode.No_Status
												, DeviceID := ''
												, MessageType := E_MessageIds.NoMessage_00);

//	fbGetCurTaskIdx : GETCURTASKINDEX;
	bTest : BOOL;
	sMessage	:	STRING;
	
	st_DisplayItem		:st_Item;
	LogSorterDump		:BOOL := FALSE;
	aTestBool			:	ARRAY[0..100] OF BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
	Each arrival location will require a unique ProcessBuffers routine. The data type defined as %I* and %Q* can be mapped to from
	corresponding items in BarCodeReaders.
	Each Arrival location will require a separate Arrival buffer in the BarCodeReaders program to map the I/O
*)

// Initialize the Transport and Update buffers
// Set Master for FB's that control the buffer
fb_ArrivalBuffer.Master := FALSE;
fb_TransportBuffer.Master := FALSE;
fb_UpdateBuffer.Master := TRUE;

// Turn ON/OFF Logging of all activity in/out
fb_ArrivalBuffer.LogEntries := .nItemBufferLogEnable.ARRIVALS;
fb_TransportBuffer.LogEntries := .nItemBufferLogEnable.TRANSPORT;
fb_UpdateBuffer.LogEntries := .nItemBufferLogEnable.UPDATE;

// Provide names for the buffers
fb_ArrivalBuffer.Name := 'SRT ARRIVAL';
fb_TransportBuffer.Name := 'SRT TRANSPORT';
fb_UpdateBuffer.Name := 'SRT UPDATE';

// Initialize the FB_ItemExtBuffer Instances
fb_ArrivalBuffer(st_BufferData := st_ArrivalBuffer
						, st_BufferFdbkIn := st_ArrivalFdbkIn
						, st_BufferFdbkOut => st_ArrivalFdbkOut);
fb_TransportBuffer(st_BufferData := st_TransportBuffer
						, st_BufferFdbkIn := st_TransportFdbkIn
						, st_BufferFdbkOut => st_TransportFdbkOut);
fb_UpdateBuffer(st_BufferData := st_UpdateBuffer
						, st_BufferFdbkIn := st_UpdateFdbkIn
						, st_BufferFdbkOut => st_UpdateFdbkOut);

IF GVL_IO.INIT THEN
	fb_ArrivalBuffer.Clear();
	fb_TransportBuffer.Clear();
	fb_UpdateBuffer.Clear();
END_IF
						
(*
	Set the Upper/Lower bound of relevant arrays for looping purposes
	ItemsArrayMax/Min for the sorter array slot count
*)
ItemsArrayMin		:= Sorter.SORTERENCODERMIN_P2140;
ItemsArrayMax		:= Sorter.SORTERENCODERMAX_P2140;

// Size is Max - Min + 1 to capture both extremes
ItemsArraySize := ItemsArrayMax - ItemsArrayMin + 1;

(*
 	Check for a value disagreement in the Arrival Buffer In and Out pointers to
  	determine if there is an update for an item.
	When an Item arrives, the System PLC adds it to the shared buffer and increments
	the InPointer
*)
IF st_ArrivalBuffer.nInPointer <> fb_ArrivalBuffer.OutPointer THEN
	fb_ArrivalBuffer.RemoveItem(st_ItemToReturn => st_ArrivalItem);
END_IF

// Input Item read at bar code reader from System PLC to sorter
IF st_ArrivalItem.ID <> '' THEN
	IF .nSortBufferLogEnable.BUFFER_ARRIVAL THEN
		sMessage := CONCAT(' Item: ', st_ArrivalItem.ID);
		sMessage := CONCAT(sMessage,' Pulses: ');
		sMessage := CONCAT(sMessage, UDINT_TO_STRING(st_Sorter.EncoderCounts));
		// Write to the Error List
		ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG
			, msgFmtStr := 'Arrival Processed: %s'
			, strArg := sMessage);
	END_IF
	// Indicate that this item did not get added to the sorter and add to the exit buffer
	//  Both as a TransportUpdate and TransportComplete message type 
	IF st_NextToInduct.Item.ID <> '' THEN
		IF .nSortBufferLogEnable.BUFFER_MISSINDUCT THEN
			sMessage := CONCAT(' Item: ', st_NextToInduct.Item.ID);
			// Write to the Error List
			ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG
				, msgFmtStr := 'Item Removed - Not Inducted: %s'
				, strArg := sMessage);
		END_IF
		// Transport Response
		st_NextToInduct.Item.Status := E_StatusCode.Assign_NotInducted;
		st_NextToInduct.Item.DeviceID := st_Sorter.Config.Name;
		st_NextToInduct.Item.MessageType := E_MessageIds.TransportResponse_25;
		fb_UpdateBuffer.AddItem(st_ItemToAdd := st_NextToInduct.Item);

		// Transport Complete
		st_NextToInduct.Item.Status := E_StatusCode.Divert_NotInducted;
		st_NextToInduct.Item.MessageType := E_MessageIds.TransportComplete_26;
		fb_UpdateBuffer.AddItem(st_ItemToAdd := st_NextToInduct.Item);
	END_IF
	// Copy Last BCR item to Item to Induct
	st_NextToInduct.Item :=  st_ArrivalItem;
	st_NextToInduct.Item.Destination := st_Sorter.Config.DefaultDestination;
	// Capture an encoder value that when the encoder count exceeds this value, NextToInduct item will be cleared
	st_NextToInduct.Counts := st_Sorter.EncoderCounts;
	// Clear the Last recieved item
	st_ArrivalItem := BlankItem;
	// Prepare to replace the Temporarily assigned item with this item
	IF st_TempInductItem.Item.ID <> '' THEN
		// Capture the Counts and Length from the temporary item
		st_NextToInduct.Counts := st_TempInductItem.Counts;
		st_NextToInduct.Item.Length := st_TempInductItem.Item.Length;
		//Identify the Item to replace in the sorter array
		st_ReplaceItem := st_TempInductItem.Item;
		st_TempInductItem.Counts := 0;
		st_TempInductItem.Item := BlankItem;
		IF .nSortBufferLogEnable.BUFFER_TEMPINDUCT THEN
			ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG
				, msgFmtStr := 'Temp ID Replaced : %s'
				, strArg := st_ReplaceItem.ID); 
		END_IF
	END_IF
END_IF

(*
 	Check for a value disagreement in the SorterTransportBuffer In and Out pointers to
  	determine if there is an update for an item.
	When an update arrived, the System PLC adds it to the shared buffer and increments
	the InPointer
*)
IF st_TransportBuffer.nInPointer <> fb_TransportBuffer.OutPointer THEN
	fb_TransportBuffer.RemoveItem(st_ItemToReturn => st_ToUpdate.Item);
END_IF

// Test the Item to Update against the Item to Induct and update if they match:
//	Update the NextItemToInduct with the updated data, then clear the Item to Update
IF st_ToUpdate.Item.ID <> '' THEN
	IF st_ToUpdate.Item.ID = st_NextToInduct.Item.ID THEN
		// Indicate that the transport command was received and a response was sent
		st_NextToInduct.Item.MessageType := E_MessageIds.TransportResponse_25;
		// Test the assigned lane for availability
		IF aDiverts[st_ToUpdate.Item.Destination].Full
		   OR aDiverts[st_ToUpdate.Item.Destination].Faulted THEN
			// Prepare a message to indicate that the item cannot be assigned
			st_ToUpdate.Item.Status := E_StatusCode.Assign_Full;
			st_ToUpdate.Item.DeviceID := st_Sorter.Config.Name;
			st_ToUpdate.Item.MessageType := E_MessageIds.TransportResponse_25;
			fb_UpdateBuffer.AddItem(st_ItemToAdd := st_ToUpdate.Item);
			st_NextToInduct.Item.ExtStatus := E_StatusCode.Divert_Full;
		ELSE
			st_NextToInduct.Item.DeviceID := st_Sorter.Config.Name;
			st_NextToInduct.Item.Status := E_StatusCode.Assign_Accepted;
			// Update the Destination
			st_NextToInduct.Item.Destination := st_ToUpdate.Item.Destination;
			fb_UpdateBuffer.AddItem(st_ItemToAdd := st_NextToInduct.Item);
		END_IF
		// If commissioning, ignore any other direction
		IF DivertToCommission > 0 THEN
			st_NextToInduct.Item.Destination := DivertToCommission;
		END_IF
		// Log the update
		IF .nSortBufferLogEnable.BUFFER_INDUCT THEN
			sMessage := CONCAT(' Item: ', st_ToUpdate.Item.ID);
			sMessage := CONCAT(sMessage,' Pulses: ');
			sMessage := CONCAT(sMessage, UDINT_TO_STRING(st_Sorter.EncoderCounts));
			sMessage := CONCAT(sMessage,' Status: ');
			sMessage := CONCAT(sMessage, UDINT_TO_STRING(st_ToUpdate.Item.Status));
			sMessage := CONCAT(sMessage,' Ext Status: ');
			sMessage := CONCAT(sMessage, UDINT_TO_STRING(st_ToUpdate.Item.ExtStatus));
			// Write to the Error List
			ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG
				, msgFmtStr := 'Found Before Induct: %s'
				, strArg := sMessage);
		END_IF
		// We updated the item we were inducting, clear the Item to update
		st_ToUpdate.Item := BlankItem;
	END_IF
END_IF

// Clear the Update Item Found record each pass
TransportItemFound := BlankItem;

// Clear the last detected Exit item
ExitItemFound.Item := BlankItem;

// Reset the Detection booleans
ExitInDivert := FALSE;
ExitDiverting := FALSE;
ExitDetected := FALSE;
ExitSuccess := FALSE;
ExitComplete := FALSE;

// Loop through the entire array, it should be appropriately sized for the length of the sorter section
FOR UpdateIndexCounter := UDINT_TO_DINT(ItemsArrayMin) TO UDINT_TO_DINT(ItemsArrayMax) DO //Loop through everything in the sorter	

	// For Transport commands, start from the current encoder count and work backwards
	TransportSorterIndex := F_CalculateIndex(Offset := -(UpdateIndexCounter)
											, InitialValue := st_Sorter.EncoderCounts
											, BufferSize := ItemsArraySize);

	// This is the item in the sorter array that we will be procesing this pass, testing for a Transport update message
	TransportItemInSorter := aItems[UDINT_TO_DINT(TransportSorterIndex)];

	// Test for a replace item
	// ReplaceItem is the temporary item
	// NextToInduct is the item to replace the temporary with
	IF st_ReplaceItem.ID <> '' THEN
		IF st_ReplaceItem.ID = TransportItemInSorter.ID THEN
			IF .nSortBufferLogEnable.BUFFER_REPLACEINDUCT THEN
				sMessage := CONCAT(' Item: ', st_ReplaceItem.ID);
				sMessage := CONCAT(sMessage,' New Item: ');
				sMessage := CONCAT(sMessage, st_NextToInduct.Item.ID);
				sMessage := CONCAT(sMessage,' Index: ');
				sMessage := CONCAT(sMessage, UDINT_TO_STRING(TransportSorterIndex));
				sMessage := CONCAT(sMessage,' Orig Dest: ');
				sMessage := CONCAT(sMessage, DINT_TO_STRING(TransportItemInSorter.Destination));
				sMessage := CONCAT(sMessage,' New Dest: ');
				sMessage := CONCAT(sMEssage, DINT_TO_STRING(st_ReplaceItem.Destination));
				// Write to the Error List
				ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG
					, msgFmtStr := 'Item ID Replaced After Induct: %s'
					, strArg := sMessage);
			END_IF
			TransportItemInSorter.ID := st_NextToInduct.Item.ID;
			TransportItemInSorter.Destination := st_NextToInduct.Item.Destination;
			TransportItemInSorter.DeviceID := st_NextToInduct.Item.DeviceID;
			TransportItemInSorter.MessageType := st_NextToInduct.Item.MessageType;
			TransportItemInSorter.Status := st_NextToInduct.Item.Status;
			TransportItemInSorter.UniqueID := st_NextToInduct.Item.UniqueID;
			TransportItemInSorter.CapturedInMetrics := st_NextToInduct.Item.CapturedInMetrics;
		END_IF
	END_IF
	// Test for an Item Update
	IF st_ToUpdate.Item.ID <> '' THEN
		// Test the sorter item against the update item
		IF st_ToUpdate.Item.ID = TransportItemInSorter.ID THEN
			IF .nSortBufferLogEnable.BUFFER_UPDATEINDUCT THEN
				sMessage := CONCAT(' Item: ', st_ToUpdate.Item.ID);
				sMessage := CONCAT(sMessage,' Index: ');
				sMessage := CONCAT(sMessage, UDINT_TO_STRING(TransportSorterIndex));
				// Write to the Error List
				ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG
					, msgFmtStr := 'Found After Induct: %s'
					, strArg := sMessage);
			END_IF
			// Copy the found item record, 
			TransportItemFound := TransportItemInSorter;
			// Test the destined divert for availability
			IF aDiverts[TransportItemFound.Destination].Full OR aDiverts[TransportItemFound.Destination].Faulted THEN
				// Prepare a message to indicate that the item cannot be assigned
				TransportItemFound.Status := E_StatusCode.Assign_Full;
				TransportItemFound.ExtStatus := E_StatusCode.Divert_Full;
				TransportItemFound.MessageType := E_MessageIds.TransportResponse_25;
				TransportItemFound.Destination := st_Sorter.Config.DefaultDestination;
			// Test for an already diverting item and assign an ExtStatus of LateAssignment
			ELSIF TransportItemInSorter.Status >= E_StatusCode.Diverting THEN
				TransportItemFound.ExtStatus := E_StatusCode.Divert_LateAssignment;
				TransportItemFound.MessageType := E_MessageIds.TransportResponse_25;
			ELSE
				//  Change the destination, which should be the only item in the update
				TransportItemFound.Destination := st_ToUpdate.Item.Destination;
				// This message indicates we could assign the Item
				TransportItemFound.Status := E_StatusCode.Assign_Accepted;
				TransportItemFound.MessageType := E_MessageIds.TransportResponse_25;
			END_IF
			// Add the item to the update buffer
			fb_UpdateBuffer.AddItem(TransportItemFound);
			// Clear the ToUpdate Item
			st_ToUpdate.Item := BlankItem;
		END_IF
	END_IF
	
	IF TransportItemFound.ID <> '' THEN
		// Test the sorter item against the update item
		IF TransportItemFound.ID = TransportItemInSorter.ID THEN
			// Only update if it is different
			IF TransportItemFound.Destination <> TransportItemInSorter.Destination THEN
				IF .nSortBufferLogEnable.BUFFER_UPDATEDEST THEN
					sMessage := CONCAT(' Item: ', TransportItemInSorter.ID);
					sMessage := CONCAT(sMessage,' Index: ');
					sMessage := CONCAT(sMessage, UDINT_TO_STRING(TransportSorterIndex));
					sMessage := CONCAT(sMessage,' Orig Dest: ');
					sMessage := CONCAT(sMessage, DINT_TO_STRING(TransportItemInSorter.Destination));
					// Write to the Error List
					ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG
						, msgFmtStr := 'Dest Updated After Induct: %s'
						, strArg := sMessage);
				END_IF
				// Update the Destination. If the destination is unavailable, it has been already been set to the default
				TransportItemInSorter.Destination := TransportItemFound.Destination;
				TransportItemInSorter.MessageType := TransportItemFound.MessageType;
				TransportItemInSorter.Status := TransportItemFound.Status;
				TransportItemInSorter.ExtStatus := TransportItemFound.ExtStatus;
	
				IF .nSortBufferLogEnable.BUFFER_UPDATEDEST THEN
					sMessage := CONCAT(' Item: ', TransportItemInSorter.ID);
					sMessage := CONCAT(sMessage,' Index: ');
					sMessage := CONCAT(sMessage, UDINT_TO_STRING(TransportSorterIndex));
					sMessage := CONCAT(sMessage,' New Dest: ');
					sMessage := CONCAT(sMessage, DINT_TO_STRING(TransportItemInSorter.Destination));
					// Write to the Error List
					ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG
						, msgFmtStr := 'Dest Updated After Induct: %s'
						, strArg := sMessage);
				END_IF
			END_IF
			// Make sure that the destination update makes it to the item being inducted into the sorter
			IF st_UpdateItem.Item.ID <> '' THEN
				IF st_UpdateItem.Item.ID = TransportItemFound.ID THEN
					IF st_UpdateItem.Item.Destination <> TransportItemFound.Destination THEN
						IF .nSortBufferLogEnable.BUFFER_UPDATEDEST THEN
							// Log the original destination
							sMessage := CONCAT(' Item: ', st_UpdateItem.Item.ID);
							sMessage := CONCAT(sMessage, ' Pulses: ');
							sMessage := CONCAT(sMessage, UDINT_TO_STRING(st_Sorter.EncoderCounts));
							sMessage := CONCAT(sMessage,' Orig Dest: ');
							sMessage := CONCAT(sMessage, DINT_TO_STRING(st_UpdateItem.Item.Destination));
							// Write to the Error List
							ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG
								, msgFmtStr := 'Induct Dest Changed: %s'
								, strArg := sMessage);
						END_IF
						// Update the Destination
						st_UpdateItem.Item.Destination := TransportItemFound.Destination;
						// Log the new destination
						IF .nSortBufferLogEnable.BUFFER_UPDATEDEST THEN
							sMessage := CONCAT(' Item: ', st_UpdateItem.Item.ID);
							sMessage := CONCAT(sMessage, ' Pulses: ');
							sMessage := CONCAT(sMessage, UDINT_TO_STRING(st_Sorter.EncoderCounts));
							sMessage := CONCAT(sMessage,' New Dest: ');
							sMessage := CONCAT(sMessage, DINT_TO_STRING(st_UpdateItem.Item.Destination));
							// Write to the Error List
							ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG
								, msgFmtStr := 'Induct Dest Changed: %s'
								, strArg := sMessage);
						END_IF
					END_IF
				END_IF
			ELSE
				IF .nSortBufferLogEnable.BUFFER_UPDATEDEST THEN
					sMessage := CONCAT(' Item: ', TransportItemInSorter.ID);
					sMessage := CONCAT(sMessage,' Index: ');
					sMessage := CONCAT(sMessage, UDINT_TO_STRING(TransportSorterIndex));
					sMessage := CONCAT(sMessage,' Orig Dest: ');
					sMessage := CONCAT(sMessage, DINT_TO_STRING(TransportItemInSorter.Destination));
					// Write to the Error List
					ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG
						, msgFmtStr := 'Dest Received After Induct: %s'
						, strArg := sMessage);
				END_IF
				
			END_IF
		END_IF
	END_IF

	// Put the updated record back into the array
	aItems[TransportSorterIndex] := TransportItemInSorter;
	
//==================================================
// 	Done procesing Transport information
//
//	Begin processing Update/Exit information
//==================================================
	
	// For exits, start from the current encoder count and work forward
	ExitSorterIndex := F_CalculateIndex(Offset := UpdateIndexCounter
										, InitialValue := st_Sorter.EncoderCounts
										, BufferSize := ItemsArraySize);

	// Identify the Item we are testing
	ExitItemInSorter := aItems[ExitSorterIndex];

	// Populated ID identifies an item in the sorter
	// Between the two Divert status codes indicates that the item has attempted to divert
	IF ExitItemInSorter.ID <> '' THEN
		// Capture the Item encoder index and the Item at the current index
		//  This represents the first item record for this item
		//  It is captured to log the start index to allow this first record to be updated
		//  when the item is completely diverted
		IF ExitItemFound.Item.ID = '' THEN
			ExitItemFound.Counts := ExitSorterIndex;
			ExitItemFound.Item := ExitItemInSorter;
			IF ExitItemFound.Item.Status = E_StatusCode.Divert_Complete THEN
				ExitComplete := TRUE;
			END_IF
		END_IF
		// When ExitComplete is TRUE, and the ID's match, clear out this Item
		IF ExitComplete THEN
			IF ExitItemInSorter.ID = ExitItemFound.Item.ID THEN
				IF aItems[ExitSorterIndex].ID <> '' THEN
					IF .nSortBufferLogEnable.BUFFER_DUMP THEN
						sMessage := CONCAT(' Item: ', aItems[ExitSorterIndex].ID);
						sMessage := CONCAT(sMessage,' Index: ');
						sMessage := CONCAT(sMessage, UDINT_TO_STRING(ExitSorterIndex));
						sMessage := CONCAT(sMessage,' Item Status: ');
						sMessage := CONCAT(sMessage, DINT_TO_STRING(aItems[ExitSorterIndex].Status));
						sMessage := CONCAT(sMessage,' Item Ext Status: ');
						sMessage := CONCAT(sMessage, DINT_TO_STRING(aItems[ExitSorterIndex].ExtStatus));
						// Write to the Error List
						ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG
							, msgFmtStr := 'Exit Complete Dump Info: %s'
							, strArg := sMessage);
					END_IF
				END_IF
				aItems[ExitSorterIndex] := BlankItem;
			END_IF
		// When ExitComplete is FALSE, test for a diverting/diverted item
		ELSE
			// Detect when this item is in a diverting state
			IF (ExitItemInSorter.Status >= E_StatusCode.Diverting
			   OR ExitItemInSorter.Status <= E_StatusCode.Divert_Success)
			   THEN
			   	ExitInDivert := TRUE;
				(*
					Status value increase from Diverting to Divert_Complete
					Codes to indicate divert disposition are between Diverting and Divert_Detected
					Divert_Full and Diverting are set in FB_DivertDecision/FB_DivertControl
					Divert_Detected, Divert_Success, and Divert_Missed are set in FB_ConfirmCheck
				*)
				ExitDiverting := TRUE;
				IF ExitItemInSorter.Status = E_StatusCode.Divert_Detected THEN
					ExitDetected := TRUE;
				END_IF
				// Once the divert is successful, we are no longer "diverting"
				IF ExitItemInSorter.Status = E_StatusCode.Divert_Success THEN
					ExitSuccess := TRUE;
					ExitDiverting := FALSE;
				END_IF
				(*	
					ExitItemInSorter is the current item being examined
					ExitItemFound.Item is a copy of the Array item at ExitItemFound.Counts
					ExitItemFound.Counts references the Array index of the first record associated with this item
					When a Status/ExtStatus of greater value is detected, the first record Status/ExtStatus is overwritten
					The ExitItemFound.Item.Status/.ExtStatus is also updated
				*)
				IF ExitItemInSorter.Status > aItems[ExitItemFound.Counts].Status THEN
					aItems[ExitItemFound.Counts].Status := ExitItemInSorter.Status;
					ExitItemFound.Item.Status := ExitItemInSorter.Status;
				END_IF
				IF ExitItemInSorter.ExtStatus > aItems[ExitItemFound.Counts].ExtStatus THEN
					aItems[ExitItemFound.Counts].ExtStatus := ExitItemInSorter.ExtStatus;
					ExitItemFound.Item.ExtStatus := ExitItemInSorter.ExtStatus;
				END_IF
			END_IF
			aItems[ExitSorterIndex].Status := ExitItemFound.Item.Status;
		END_IF
	ELSE
		(*
			This path is followed when the ExitItemInSorter.ID is empty, which indicates
			that the array record associated with this index is not occupied

			ExitInDivert, ExitDiverting and ExitSuccess are all set while the .ID is not empty
		*)
		// This item was in a "diverting" state
		IF ExitInDivert THEN
			// This item is not currently diverting
			IF NOT ExitDiverting THEN
				// Only change to a Divert_Success if a Divert_Success was detected
				// Any other status is captured in the ELSE clause of the CASE statement
				IF ExitSuccess THEN
					ExitItemFound.Item.Status := E_StatusCode.Divert_Success;
				END_IF
				ExitItemFound.Item.CapturedInMetrics := TRUE;
				ExitItemFound.Item.MessageType := E_MessageIds.TransportComplete_26;
				fb_UpdateBuffer.AddItem(ExitItemFound.Item);
				aItems[ExitItemFound.Counts].Status := E_StatusCode.Divert_Complete;
			END_IF
		END_IF
		// Clear the last detected Exit item
		ExitItemFound.Item := BlankItem;
		// Reset the Detection booleans
		ExitInDivert := FALSE;
		ExitDiverting := FALSE;
		ExitDetected := FALSE;
		ExitSuccess := FALSE;
		ExitComplete := FALSE;
	END_IF
END_FOR

// If the ID is populated, we didn't find a match to update
IF st_ToUpdate.Item.ID <> '' THEN
	IF .nSortBufferLogEnable.BUFFER_UNASSIGNED THEN
		sMessage := CONCAT(' Item: ', st_ToUpdate.Item.ID);
		// Write to the Error List
		ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG
			, msgFmtStr := 'Item Not Updated: %s'
			, strArg := sMessage);
	END_IF
	st_ToUpdate.Item.Status := E_StatusCode.Assign_NotFound;
	st_ToUpdate.Item.DeviceID := st_Sorter.Config.Name;
	st_ToUpdate.Item.MessageType := E_MessageIds.TransportResponse_25;
	fb_UpDateBuffer.AddItem(st_ItemToAdd := st_ToUpdate.Item);
	st_ToUpdate.Item := BlankItem;
END_IF
]]></ST>
    </Implementation>
    <LineIds Name="ProcessBuffers_P2140">
      <LineId Id="7157" Count="0" />
      <LineId Id="7164" Count="2" />
      <LineId Id="7159" Count="0" />
      <LineId Id="7158" Count="0" />
      <LineId Id="5886" Count="0" />
      <LineId Id="5550" Count="9" />
      <LineId Id="6045" Count="4" />
      <LineId Id="5560" Count="9" />
      <LineId Id="5881" Count="0" />
      <LineId Id="5889" Count="1" />
      <LineId Id="5892" Count="1" />
      <LineId Id="5891" Count="0" />
      <LineId Id="5570" Count="22" />
      <LineId Id="6464" Count="0" />
      <LineId Id="6077" Count="0" />
      <LineId Id="6088" Count="1" />
      <LineId Id="6084" Count="3" />
      <LineId Id="6465" Count="0" />
      <LineId Id="5593" Count="2" />
      <LineId Id="6467" Count="0" />
      <LineId Id="6092" Count="0" />
      <LineId Id="6099" Count="3" />
      <LineId Id="6468" Count="1" />
      <LineId Id="5597" Count="16" />
      <LineId Id="5954" Count="1" />
      <LineId Id="5965" Count="0" />
      <LineId Id="5963" Count="1" />
      <LineId Id="5966" Count="0" />
      <LineId Id="5956" Count="0" />
      <LineId Id="5961" Count="1" />
      <LineId Id="6470" Count="0" />
      <LineId Id="5980" Count="2" />
      <LineId Id="6471" Count="0" />
      <LineId Id="5957" Count="0" />
      <LineId Id="5614" Count="0" />
      <LineId Id="5820" Count="0" />
      <LineId Id="5639" Count="10" />
      <LineId Id="5952" Count="0" />
      <LineId Id="5650" Count="11" />
      <LineId Id="6966" Count="0" />
      <LineId Id="5662" Count="10" />
      <LineId Id="6978" Count="0" />
      <LineId Id="6969" Count="3" />
      <LineId Id="6979" Count="3" />
      <LineId Id="6973" Count="4" />
      <LineId Id="5673" Count="13" />
      <LineId Id="6636" Count="0" />
      <LineId Id="5687" Count="13" />
      <LineId Id="5967" Count="0" />
      <LineId Id="6116" Count="1" />
      <LineId Id="5968" Count="1" />
      <LineId Id="6476" Count="0" />
      <LineId Id="6064" Count="0" />
      <LineId Id="6114" Count="1" />
      <LineId Id="6065" Count="0" />
      <LineId Id="6073" Count="0" />
      <LineId Id="6071" Count="0" />
      <LineId Id="6074" Count="0" />
      <LineId Id="6070" Count="0" />
      <LineId Id="6075" Count="0" />
      <LineId Id="6066" Count="3" />
      <LineId Id="6477" Count="0" />
      <LineId Id="5973" Count="6" />
      <LineId Id="5972" Count="0" />
      <LineId Id="5970" Count="0" />
      <LineId Id="5701" Count="3" />
      <LineId Id="6478" Count="0" />
      <LineId Id="6058" Count="1" />
      <LineId Id="6076" Count="0" />
      <LineId Id="6060" Count="3" />
      <LineId Id="6479" Count="0" />
      <LineId Id="5705" Count="0" />
      <LineId Id="5822" Count="0" />
      <LineId Id="5708" Count="3" />
      <LineId Id="6967" Count="0" />
      <LineId Id="5712" Count="1" />
      <LineId Id="7083" Count="0" />
      <LineId Id="7077" Count="0" />
      <LineId Id="7080" Count="1" />
      <LineId Id="5715" Count="0" />
      <LineId Id="7075" Count="1" />
      <LineId Id="5716" Count="2" />
      <LineId Id="5720" Count="0" />
      <LineId Id="7074" Count="0" />
      <LineId Id="7071" Count="0" />
      <LineId Id="7073" Count="0" />
      <LineId Id="7072" Count="0" />
      <LineId Id="5721" Count="5" />
      <LineId Id="7086" Count="0" />
      <LineId Id="7084" Count="0" />
      <LineId Id="6480" Count="0" />
      <LineId Id="6103" Count="4" />
      <LineId Id="6110" Count="3" />
      <LineId Id="6481" Count="0" />
      <LineId Id="6131" Count="0" />
      <LineId Id="5728" Count="2" />
      <LineId Id="6968" Count="0" />
      <LineId Id="6130" Count="0" />
      <LineId Id="6482" Count="0" />
      <LineId Id="6118" Count="2" />
      <LineId Id="6129" Count="0" />
      <LineId Id="6122" Count="0" />
      <LineId Id="6125" Count="3" />
      <LineId Id="6483" Count="0" />
      <LineId Id="6366" Count="0" />
      <LineId Id="7085" Count="0" />
      <LineId Id="6368" Count="0" />
      <LineId Id="6370" Count="0" />
      <LineId Id="7087" Count="0" />
      <LineId Id="6484" Count="0" />
      <LineId Id="6371" Count="9" />
      <LineId Id="6485" Count="0" />
      <LineId Id="6381" Count="2" />
      <LineId Id="6486" Count="0" />
      <LineId Id="6384" Count="8" />
      <LineId Id="6487" Count="0" />
      <LineId Id="6393" Count="1" />
      <LineId Id="7056" Count="0" />
      <LineId Id="7059" Count="10" />
      <LineId Id="7057" Count="1" />
      <LineId Id="7054" Count="0" />
      <LineId Id="5732" Count="35" />
      <LineId Id="6289" Count="0" />
      <LineId Id="6490" Count="0" />
      <LineId Id="6290" Count="2" />
      <LineId Id="6572" Count="1" />
      <LineId Id="6889" Count="1" />
      <LineId Id="6293" Count="5" />
      <LineId Id="5768" Count="6" />
      <LineId Id="6579" Count="0" />
      <LineId Id="5775" Count="1" />
      <LineId Id="5778" Count="0" />
      <LineId Id="6778" Count="0" />
      <LineId Id="6895" Count="1" />
      <LineId Id="6781" Count="0" />
      <LineId Id="6811" Count="8" />
      <LineId Id="6789" Count="0" />
      <LineId Id="6782" Count="0" />
      <LineId Id="6788" Count="0" />
      <LineId Id="6783" Count="1" />
      <LineId Id="6787" Count="0" />
      <LineId Id="6776" Count="0" />
      <LineId Id="6706" Count="0" />
      <LineId Id="5783" Count="0" />
      <LineId Id="6786" Count="0" />
      <LineId Id="6707" Count="0" />
      <LineId Id="6891" Count="3" />
      <LineId Id="5785" Count="0" />
      <LineId Id="6563" Count="0" />
      <LineId Id="5786" Count="1" />
      <LineId Id="6799" Count="0" />
      <LineId Id="6801" Count="3" />
      <LineId Id="6800" Count="0" />
      <LineId Id="5788" Count="19" />
      <LineId Id="6637" Count="0" />
      <LineId Id="5808" Count="6" />
      <LineId Id="6488" Count="0" />
      <LineId Id="6148" Count="0" />
      <LineId Id="6153" Count="3" />
      <LineId Id="6489" Count="0" />
      <LineId Id="5815" Count="4" />
      <LineId Id="3094" Count="0" />
      <LineId Id="6220" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>