<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="BarCodeReaders" Id="{6db726c2-b8f2-4f56-a606-779b1afe45e4}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM BarCodeReaders
VAR
	BCR_S2140_01: CognexDataMan260;		// P2140 Divert 
	BCR_S2141_01: CognexDataMan260;		// P2141 Location Update
	BCR_S2150_01: CognexDataMan260;		// P2150 Sorter	
	BCR_S3080_01: CognexDataMan260;		// P3080 Location Update

//----------------------------------------BCR_S2140_01--------------------------------------------------------------		
	P2140_Arrival_Item 			: ST_Item;		// Output Item (Bar code read) To Sort PLC
	P2140_LastArrival_Item		: ST_Item;		// Last Output Item (Bar code read) To Sort PLC
	ReadID_P2140_Old		: UDINT;

	fb_SorterArrivalBuffer_P2140			: FB_ItemBuffer;	// Function to Process the SorterArrivalBuffer
	
	sBcr2140Log			: STRING;
	tpBcr2140Trig					: TP;	// Pulse timer for BCR Reader

	rSorter2140PE					: R_TRIG; 	// Capture the Rising edge of the Sorter BCR PE
	fSorter2140PE					: F_TRIG; 	// Capture the Falling edge of the Sorter BCR PE
	r_BCR2140TriggerON			: R_TRIG;
	f_BCR2140TriggerON			: F_TRIG;
	
//----------------------------------------BCR_S2150_01--------------------------------------------------------------
	P2150_Arrival_Item 			: ST_Item;		// Output Item (Bar code read) To Sort PLC
	P2150_LastArrival_Item		: ST_Item;		// Last Output Item (Bar code read) To Sort PLC
	ReadID_P2150_Old		: UDINT;

	fb_SorterArrivalBuffer_P2150			: FB_ItemBuffer;	// Function to Process the SorterArrivalBuffer

	sBcr2150Log			: STRING;
	tpBcr2150Trig					: TP;	// Pulse timer for BCR Reader

	rSorter2150PE					: R_TRIG; 	// Capture the Rising edge of the Sorter BCR PE
	fSorter2150PE					: F_TRIG; 	// Capture the Falling edge of the Sorter BCR PE
	r_BCR2150TriggerON			: R_TRIG;
	f_BCR2150TriggerON			: F_TRIG;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
	When multiple origination requests are possible, create multiple arrival buffers, one per origination request
	Along with all of the required structures 
	These additional buffers are mapped as I/O between this routine and the corresponding ProcessBuffers program instance
*)
//----------------------------------------BCR_S2140_01--------------------------------------------------------------
// Create instances of Buffer Processing Functions to initialize the buffers and data
fb_SorterArrivalBuffer_P2140.Master := TRUE;

// Setup Logging
fb_SorterArrivalBuffer_P2140.LogEntries := .nItemBufferLogEnable.ARRIVALS OR .nItemBufferLogEnableP2140.ARRIVALS;

// Setup Buffer Name for Logging
fb_SorterArrivalBuffer_P2140.Name := 'P2140 SYS ARRIVAL';

fb_SorterArrivalBuffer_P2140(st_BufferData := st_SorterArrivalBuffer_P2140
					, st_BufferFdbkIn := st_ArrivalFdbkIn_P2140
					, st_BufferFdbkOut => st_ArrivalFdbkOut_P2140);

IF GVL_IO.INIT THEN
	fb_SorterArrivalBuffer_P2140.Clear();
END_IF
//----------------------------------------BCR_S2150_01--------------------------------------------------------------
// Create instances of Buffer Processing Functions to initialize the buffers and data
fb_SorterArrivalBuffer_P2150.Master := TRUE;

// Setup Logging
fb_SorterArrivalBuffer_P2150.LogEntries := .nItemBufferLogEnable.ARRIVALS OR .nItemBufferLogEnableP2150.ARRIVALS;

// Setup Buffer Name for Logging
fb_SorterArrivalBuffer_P2150.Name := 'P2150 SYS ARRIVAL';

fb_SorterArrivalBuffer_P2150(st_BufferData := st_SorterArrivalBuffer_P2150
					, st_BufferFdbkIn := st_ArrivalFdbkIn_P2150
					, st_BufferFdbkOut => st_ArrivalFdbkOut_P2150);

IF GVL_IO.INIT THEN
	fb_SorterArrivalBuffer_P2150.Clear();
END_IF


// Reset All Metrics when requested
IF MAIN.In_ResetAllMetrics THEN
	BCR_S2140_01.In_ResetCounts := MAIN.In_ResetAllMetrics;
	BCR_S2141_01.In_ResetCounts := MAIN.In_ResetAllMetrics;
	BCR_S2150_01.In_ResetCounts := MAIN.In_ResetAllMetrics;
	BCR_S3080_01.In_ResetCounts := MAIN.In_ResetAllMetrics;

END_IF
//----------------------------------------BCR_S2140_01--------------------------------------------------------------
//Divert
// Set up Bar Code Readers
BCR_S2140_01.LogEntries := .nBarcodeLogEnable.BCR_S2140_01_LOG;
BCR_S2140_01(
	In_ReadTrig:= PhotoEyes.PE_10081.Out_OnFltrd, 
	In_ResetCounts:= , 
	In_TriggerOnTime := T#20MS ,
	In_EquipID := '00064',
	Out_NewReadTrig=> , 
	Out_ReadString=> , 
	Out_ReadStatus=> ,
	Out_ResultID=>, 
	MisreadCount=> , 
	GoodreadCount=> );
//Logging
BCR_S2140_01.LogEntries := .nBarcodeLogEnable.BCR_S2140_01_LOG;
tpBcr2140Trig(
	IN := PhotoEyes.PE_10081.Out,
				PT := T#10MS,
				Q =>);
// Capture rising and falling edge Triggers of the Sorter BCR Trigger PE
rSorter2140PE(CLK:= PhotoEyes.PE_10081.Out, Q =>);
fSorter2140PE(CLK:= PhotoEyes.PE_10081.Out, Q =>);

// Log the rising/falling edge of the Trigger
IF rSorter2140PE.Q OR fSorter2140PE.Q THEN
	IF nBarcodeLogEnable.TRIGGER_PE THEN
		// Write to the Error List
		ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG,
			msgFmtStr := 'Sort BCR PE Blocked : %s',
			strArg := BOOL_TO_STRING(PhotoEyes.PE_10081.Out)
			); 
	END_IF
END_IF

// Send Read Information to Sorter	
//	Creates Arrival message at sorter
IF ReadID_P2140_Old <> BarCodeReaders.BCR_S2140_01.GoodreadCount THEN
	P2140_Arrival_Item.UniqueID := BCR_S2140_01.Out_ResultID;
	P2140_Arrival_Item.ID := BCR_S2140_01.Out_ReadString;
	P2140_Arrival_Item.Status := E_StatusCode.UpdateRequested;
	P2140_Arrival_Item.DeviceID := BCR_S2140_01.In_EquipID;
	P2140_Arrival_Item.MessageType := E_MessageIds.Arrival_23;
	P2140_Arrival_Item.Destination := .P2140_DefaultDestination;
	P2140_Arrival_Item.Length := 0;
	P2140_LastArrival_Item := P2140_Arrival_Item;
	fb_SorterArrivalBuffer_P2140.AddItem(P2140_Arrival_Item);
	ReadID_P2140_Old := BarCodeReaders.BCR_S2140_01.GoodreadCount;
ELSE 
	P2140_Arrival_Item := BlankItem;
	P2140_Arrival_Item.Status := E_StatusCode.UpdateRequested;
END_IF

//----------------------------------------BCR_S2141_01--------------------------------------------------------------
//Location Update
// Set up Bar Code Readers
BCR_S2141_01.LogEntries := .nBarcodeLogEnable.BCR_S2141_01_LOG;
BCR_S2141_01(
	In_ReadTrig:= PhotoEyes.PE_10302.Out_OnFltrd, 
	In_ResetCounts:= , 
	In_TriggerOnTime := T#20MS ,
	In_EquipID := '00067',
	Out_NewReadTrig=> , 
	Out_ReadString=> , 
	Out_ReadStatus=> ,
	Out_ResultID=>, 
	MisreadCount=> , 
	GoodreadCount=> );
//----------------------------------------BCR_S2150_01--------------------------------------------------------------
//Sorter
// Set up Bar Code Readers
	BCR_S2150_01.LogEntries := .nBarcodeLogEnable.BCR_S2150_01_LOG;
	BCR_S2150_01(
	In_ReadTrig:= PhotoEyes.PE_2301.Out_OnFltrd, 
	In_ResetCounts:= , 
	In_TriggerOnTime := T#20MS ,
	In_EquipID := '00081',
	Out_NewReadTrig=> , 
	Out_ReadString=> , 
	Out_ReadStatus=> ,
	Out_ResultID=>, 
	MisreadCount=> , 
	GoodreadCount=> );
//Logging	
BCR_S2150_01.LogEntries := .nBarcodeLogEnable.BCR_S2150_01_LOG;
tpBcr2150Trig(
	IN := PhotoEyes.PE_2301.Out,
				PT := T#10MS,
				Q =>);
// Capture rising and falling edge Triggers of the Sorter BCR Trigger PE
rSorter2150PE(CLK:= PhotoEyes.PE_2301.Out, Q =>);
fSorter2150PE(CLK:= PhotoEyes.PE_2301.Out, Q =>);

// Log the rising/falling edge of the Trigger
IF rSorter2150PE.Q OR fSorter2150PE.Q THEN
	IF nBarcodeLogEnable.TRIGGER_PE THEN
		// Write to the Error List
		ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG,
			msgFmtStr := 'Sort BCR PE Blocked : %s',
			strArg := BOOL_TO_STRING(PhotoEyes.PE_2301.Out)
			); 
	END_IF
END_IF

// Send Read Information to Sorter	
//	Creates Arrival message at sorter
IF ReadID_P2150_Old <> BarCodeReaders.BCR_S2150_01.GoodreadCount THEN
	P2150_Arrival_Item.UniqueID := BCR_S2150_01.Out_ResultID;
	P2150_Arrival_Item.ID := BCR_S2150_01.Out_ReadString;
	P2150_Arrival_Item.Status := E_StatusCode.UpdateRequested;
	P2150_Arrival_Item.DeviceID := BCR_S2150_01.In_EquipID;
	P2150_Arrival_Item.MessageType := E_MessageIds.Arrival_23;
	P2150_Arrival_Item.Destination := MsgControl.DefDestination;
	P2150_Arrival_Item.Length := 0;
	P2150_LastArrival_Item := P2140_Arrival_Item;
	fb_SorterArrivalBuffer_P2150.AddItem(P2140_Arrival_Item);
	ReadID_P2150_Old := BarCodeReaders.BCR_S2150_01.GoodreadCount;
ELSE 
	P2150_Arrival_Item := BlankItem;
	P2150_Arrival_Item.Status := E_StatusCode.UpdateRequested;
END_IF

//----------------------------------------BCR_S3080_01--------------------------------------------------------------
//Location Update
// Set up Bar Code Readers
BCR_S2150_01.LogEntries := .nBarcodeLogEnable.BCR_S2150_01_LOG;
	BCR_S3080_01(
	In_ReadTrig:= PhotoEyes.PE_9161.Out_OnFltrd, 
	In_ResetCounts:= , 
	In_TriggerOnTime := T#20MS ,
	In_EquipID := '00068',
	Out_NewReadTrig=> , 
	Out_ReadString=> , 
	Out_ReadStatus=> ,
	Out_ResultID=>, 
	MisreadCount=> , 
	GoodreadCount=> );
]]></ST>
    </Implementation>
    <LineIds Name="BarCodeReaders">
      <LineId Id="950" Count="0" />
      <LineId Id="953" Count="2" />
      <LineId Id="952" Count="0" />
      <LineId Id="951" Count="0" />
      <LineId Id="384" Count="0" />
      <LineId Id="491" Count="0" />
      <LineId Id="686" Count="0" />
      <LineId Id="685" Count="0" />
      <LineId Id="522" Count="0" />
      <LineId Id="687" Count="3" />
      <LineId Id="509" Count="1" />
      <LineId Id="385" Count="0" />
      <LineId Id="542" Count="3" />
      <LineId Id="998" Count="15" />
      <LineId Id="997" Count="0" />
      <LineId Id="1015" Count="0" />
      <LineId Id="1014" Count="0" />
      <LineId Id="742" Count="2" />
      <LineId Id="746" Count="2" />
      <LineId Id="751" Count="0" />
      <LineId Id="745" Count="0" />
      <LineId Id="386" Count="0" />
      <LineId Id="1019" Count="0" />
      <LineId Id="1075" Count="0" />
      <LineId Id="1025" Count="10" />
      <LineId Id="1024" Count="0" />
      <LineId Id="1076" Count="0" />
      <LineId Id="1078" Count="15" />
      <LineId Id="1095" Count="3" />
      <LineId Id="1190" Count="15" />
      <LineId Id="1189" Count="0" />
      <LineId Id="1267" Count="0" />
      <LineId Id="1016" Count="0" />
      <LineId Id="1021" Count="0" />
      <LineId Id="1074" Count="0" />
      <LineId Id="1037" Count="10" />
      <LineId Id="1036" Count="0" />
      <LineId Id="1017" Count="0" />
      <LineId Id="1022" Count="0" />
      <LineId Id="1073" Count="0" />
      <LineId Id="1049" Count="10" />
      <LineId Id="1048" Count="0" />
      <LineId Id="1120" Count="0" />
      <LineId Id="1122" Count="15" />
      <LineId Id="1139" Count="3" />
      <LineId Id="1207" Count="15" />
      <LineId Id="1206" Count="0" />
      <LineId Id="1166" Count="0" />
      <LineId Id="1018" Count="0" />
      <LineId Id="1023" Count="0" />
      <LineId Id="1072" Count="0" />
      <LineId Id="1061" Count="10" />
      <LineId Id="1060" Count="0" />
      <LineId Id="435" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>