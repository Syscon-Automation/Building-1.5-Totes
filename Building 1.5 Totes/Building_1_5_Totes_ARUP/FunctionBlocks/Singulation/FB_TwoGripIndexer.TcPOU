<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="FB_TwoGripIndexer" Id="{a85c213a-95f5-4e83-8ef7-633ff596690f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_TwoGripIndexer
VAR_INPUT
	{attribute 'OPC.UA.DA' := '1'}
	In_ResetState	:	BOOL;		// Clear the current functional state of the Indexer

	In_Pause:	BOOL;
	
	PE_Grabber_1:	BOOL;
	PE_Grabber_2:	BOOL;

	In_SV_Grabber_1_Extend	:	BOOL;
	In_SV_Grabber_1_Retract	:	BOOL;
	In_Grabber_1_Extended	:	BOOL;
	In_Grabber_1_Retracted	:	BOOL;

	In_SV_Grabber_2_Extend	:	BOOL;
	In_SV_Grabber_2_Retract	:	BOOL;
	In_Grabber_2_Extended	:	BOOL;
	In_Grabber_2_Retracted	:	BOOL;
	
	In_EncoderCount			:	UINT;
	In_PEBlockCount			:	UINT;
	In_ReleaseCount			:	UINT;
END_VAR
VAR_OUTPUT
	Out_Grabber_1_Ext:	BOOL;
	Out_Grabber_1_Ret:	BOOL;

	Out_Grabber_2_Ext:	BOOL;
	Out_Grabber_2_Ret:	BOOL;

	{attribute 'OPC.UA.DA' := '1'}
	Status:		UINT;		// General Indexer  status
	Status_Output:	UINT;	// Indexer grabber status
	
END_VAR
VAR	
	StartUp		: BOOL := TRUE;
	rPE_Grabber_1: R_TRIG;
	rPE_Grabber_2: R_TRIG;
	fPE_Grabber_1: F_TRIG;
	fPE_Grabber_2: F_TRIG;
	
	rResetState	:	R_TRIG;
	// Extend and Retract controls
	Grabber_1_Extend		:	BOOL;
	Grabber_1_Retract		:	BOOL;

	Grabber_2_Extend		:	BOOL;
	Grabber_2_Retract		:	BOOL;
	
	BlockedPECount			:	UINT;
	ClearedPECount			:	UINT;
	ClearedDistance			:	UINT;

END_VAR

VAR CONSTANT
	// Output Status
	GRABBER1_OCCUPIED:	UINT  := 1;
	GRABBER2_OCCUPIED: 	UINT  := 2;
	
	// Singulation Status
	PAUSED:						UINT  := 0;
	PRODUCT_PRESENT:			UINT  := 1;
	PRODUCT_RELEASED:			UINT  := 2;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Process the In_ResetState
rResetState(CLK:=In_ResetState);

IF rResetState.Q THEN
	// Clear the Status
	Status := 0;
	// Clear the reset request
	In_ResetState := FALSE;
END_IF

// Extend grabbers on start up
IF StartUp OR In_Pause THEN
	Status.PAUSED := TRUE;
	
	a_ResetGrabbers();
	
	StartUp := FALSE;
	
ELSE
	Status.PAUSED := FALSE;

	// Watch finished trigger to release product from
	ProductFinishedTrigger(CLK:= IN_OCR_Finished);
	
	IF ProductFinishedTrigger.Q THEN
		Status.OCR_FINISHED := TRUE;
	END_IF
	
	// Singulation Distance Check
	IF In_EncoderCount > ClearedPECount THEN
		ClearedDistance := In_EncoderCount - ClearedPECount;
		RolloverDetect := 0;
	ELSE
		// If the encoder rolls to 0, capture the last distance as an offset
		IF RolloverDetect = 0 THEN
			RolloverDetect := ClearedDistance;
		END_IF
		// The new distance to check is the number of pulses from the Cleared count to the rollover (RolloverDetect)
		// 	plus the current encoder count
		ClearedDistance := RolloverDetect + In_EncoderCount;
	END_IF

	// Release After Distance Requirement is satisfied
	IF ClearedDistance > Cfg_GappingDistance THEN
	
		// Test for an item at the pin stop
		IF In_PE_GrabTrigger THEN
			// If upper PE is blocked then release gripper so Tote can move
			IF In_PE_ToteTrigger THEN
				// Grabber 2
				Grabber_2_Retract := TRUE;
				Grabber_2_Extend := FALSE;
			END_IF
		
			// PinStop
			PinStop_Retract := TRUE;
			PinStop_Extend := FALSE;
			Releasing := TRUE;
		END_IF
	END_IF
END_IF
// Activate all the outputs in one place
Status_Output.GRABBER_1_OCCUPIED := Grabber1(Active := In_Grabber_1_Auto, Extend:= Grabber_1_Extend, Retract := Grabber_1_Retract);
Status_Output.GRABBER_2_OCCUPIED := Grabber2(Active := In_Grabber_2_Auto, Extend:= Grabber_2_Extend, Retract := Grabber_2_Retract);
]]></ST>
    </Implementation>
    <Action Name="a_ResetGrabbers" Id="{6c52f269-b6f9-4b55-b70b-15a4f08b6416}">
      <Implementation>
        <ST><![CDATA[// Grabber 1 Set
Grabber_1_Retract := FALSE;
Grabber_1_Extend := TRUE;
// Grabber 2 Set
Grabber_2_Retract := FALSE;
Grabber_2_Extend := TRUE;
]]></ST>
      </Implementation>
    </Action>
    <Method Name="Grabber1" Id="{dbb550bf-d0ad-4c23-8643-75a48f8ef06e}">
      <Declaration><![CDATA[METHOD Grabber1 : BOOL
VAR_INPUT
	Active	: BOOL;	
	Extend	: BOOL;
	Retract	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Active THEN
	IF Extend THEN
		Out_Grabber_1_Ext := TRUE;
		Out_Grabber_1_Ret := FALSE;
	ELSIF Retract THEN
		Out_Grabber_1_Ext := FALSE;
		Out_Grabber_1_Ret := TRUE;
	ELSE
		Out_Grabber_1_Ext := FALSE;
		Out_Grabber_1_Ret := FALSE;
	END_IF
ELSE
	Out_Grabber_1_Ext := FALSE;
	Out_Grabber_1_Ret := FALSE;
END_IF

Grabber1 := Out_Grabber_1_Ext OR In_Grabber_1_Extended;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Grabber2" Id="{044ba568-b7a0-4174-81c8-2144a4f2d96a}">
      <Declaration><![CDATA[METHOD Grabber2 : BOOL
VAR_INPUT
	Active	: BOOL;	
	Extend	: BOOL;
	Retract	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Active THEN
	IF Extend THEN
		Out_Grabber_2_Ext := TRUE;
		Out_Grabber_1_Ret := FALSE;
	ELSIF Retract THEN
		Out_Grabber_1_Ext := FALSE;
		Out_Grabber_1_Ret := TRUE;
	ELSE
		Out_Grabber_1_Ext := FALSE;
		Out_Grabber_1_Ret := FALSE;
	END_IF
ELSE
	Out_Grabber_1_Ext := FALSE;
	Out_Grabber_1_Ret := FALSE;
END_IF

Grabber1 := Out_Grabber_1_Ext OR In_Grabber_1_Extended;IF Active THEN
	Out_Grabber2_Ext := TRUE;
	Out_Grabber2_Ret := FALSE;
ELSE
	Out_Grabber2_Ext := FALSE;
	Out_Grabber2_Ret := TRUE;
END_IF

Status_Output.GRABBER2_OCCUPIED := Out_Grabber2_Ext;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_TwoGripIndexer">
      <LineId Id="3" Count="63" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_TwoGripIndexer.a_ResetGrabbers">
      <LineId Id="2" Count="5" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_TwoGripIndexer.Grabber1">
      <LineId Id="3" Count="15" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_TwoGripIndexer.Grabber2">
      <LineId Id="3" Count="23" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>