<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="FB_TwoGripIndexer" Id="{a85c213a-95f5-4e83-8ef7-633ff596690f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_TwoGripIndexer
VAR_INPUT
	{attribute 'OPC.UA.DA' := '1'}
	In_ResetState	:	BOOL;		// Clear the current functional state of the Indexer

	In_Pause:	BOOL;
	In_ConveyorRunning			:	BOOL; //Added
	
	PE_Grabber:	BOOL;
	In_Grabber_1_Auto: BOOL;
	In_Grabber_1_Extended	:	BOOL;
	In_Grabber_1_Retracted	:	BOOL;

	
	In_SV_Grabber_1_Extend	:	BOOL;
	In_SV_Grabber_1_Retract	:	BOOL;
	
	In_EncoderCount			:	UINT;
	
	Cfg_GappingDistance		:	UINT;	// Distance in encoder Pulses before the next item can be released
	Cfg_ProductSize		    :	UINT;	// Size(length) in encoder count of product for the grabber to retract for
END_VAR
VAR_OUTPUT
	{attribute 'OPC.UA.DA' := '1'}
	Out_Homed					:	BOOL;
	{attribute 'OPC.UA.DA' := '1'}
	Out_Ready					:	BOOL;
	{attribute 'OPC.UA.DA' := '1'}
	Out_Running					:	BOOL;
	
	Out_Grabber_1_Ext:	BOOL;
	Out_Grabber_1_Ret:	BOOL;

	{attribute 'OPC.UA.DA' := '1'}
	Status:		UINT;		// General Indexer  status
	Status_Output:	UINT;	// Indexer grabber status
	
END_VAR
VAR	
	StartUp		: BOOL := TRUE;
	rPE_Grabber_1: R_TRIG;
	fPE_Grabber_1: F_TRIG;
	
	tonHomeWait					:	TON := (PT := T#1S);
	tonReadyWait				:	TON := (PT := T#1S);
	tonRunningWait				:	TON := (PT := T#5S);
	
	rResetState	:	R_TRIG;
	fRetracted	: F_TRIG; 	// Capture the Falling edge of the Induct PE
	// Extend and Retract controls
	Grabber_1_Extend		:	BOOL;
	Grabber_1_Retract		:	BOOL;
	
	RolloverDetect_HeldDist			:   UINT;
	HeldCount			    :	UINT;
	HeldDistance			:	UINT;
	RolloverDetect_ReleasedDist			:   UINT;
	ReleasedCount           :	UINT;
	ReleasedDistance        :	UINT;

	fInductPE: INT;
END_VAR

VAR CONSTANT
	// Output Status
	GRABBER_1_OCCUPIED:	UINT  := 1;
	
	// Singulation Status
	PAUSED:						UINT  := 0;
	PRODUCT_PRESENT:			UINT  := 1;
	PRODUCT_RELEASED:			UINT  := 2;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Process the In_ResetState
rResetState(CLK:=In_ResetState);

IF rResetState.Q THEN
	// Clear the Status
	Status := 0;
	// Revert to the StartUp state
	StartUp := TRUE;
	// Revert to the NOT Homed state
	Out_Homed := FALSE;
	tonHomeWait(IN := FALSE);
	// Revert to the NOT Ready state
	Out_Ready := FALSE;
	tonReadyWait(IN := FALSE);
	// Revert to the NOT Running state
	Out_Running := FALSE;
	tonRunningWait(IN := FALSE);
	// Clear the reset request
	// Clear the reset request
	In_ResetState := FALSE;
END_IF

// Home the 
IF StartUp  OR NOT Out_Homed OR NOT Out_Ready THEN
	Status.PAUSED := TRUE;
	
	tonHomeWait.IN := NOT Out_Homed;
	tonHomeWait();
	IF NOT Out_Homed THEN
		// Grabber
		Grabber_1_Retract := TRUE;
		Grabber_1_Extend := FALSE;
		IF In_Grabber_1_Retracted
		   THEN
			Out_Homed := tonHomeWait.Q;
		END_IF
	END_IF

	tonReadyWait.IN := NOT Out_Ready AND Out_Homed;
	tonReadyWait();
	IF NOT Out_Ready AND Out_Homed THEN

		IF In_Grabber_1_Retracted
		   THEN
			Out_Ready := tonReadyWait.Q;
		END_IF
	END_IF

	StartUp := NOT Out_Homed OR NOT Out_Ready;
	Out_Running := FALSE;
	
ELSIF In_Pause OR NOT In_ConveyorRunning THEN
	// Grabber
	Grabber_1_Retract := TRUE;
	Grabber_1_Extend := FALSE;

ELSIF NOT Out_Running THEN
	tonRunningWait.IN := NOT OUT_Running AND Out_Ready AND Out_Homed AND In_ConveyorRunning;
	tonRunningWait();
	Out_Running := tonRunningWait.Q;

ELSIF Out_Running THEN
	Status.PAUSED := FALSE;	
		// Call Actions That run while in running state?


	END_IF
	
// Call actions???	
	
fRetracted(CLK:= In_Grabber_1_Retracted, Q =>);	
	
IF  fRetracted.Q THEN
	HeldCount := In_Encodercount;
END_IF
	
IF Releasedcount=0 AND In_Grabber_1_Retracted THEN
	ReleasedCount := In_EncoderCount;		
END_IF

IF In_Grabber_1_Retracted=0 THEN
	ReleasedCount := 0;
END_IF
	
// Singulation Distance Check, Hold for Gap
IF HeldCount <> 0 THEN
	IF In_EncoderCount > HeldCount THEN
		HeldDistance := In_EncoderCount - HeldCount;
		RolloverDetect_HeldDist := 0;
	ELSE
		// If the encoder rolls to 0, capture the last distance as an offset
		IF RolloverDetect_HeldDist = 0 THEN
			RolloverDetect_HeldDist := HeldDistance;
		END_IF
		// The new distance to check is the number of pulses from the Cleared count to the rollover (RolloverDetect)
		// 	plus the current encoder count
		HeldDistance := RolloverDetect_HeldDist + In_EncoderCount;
	END_IF
ELSE
	HeldDistance:=0;
END_IF
	
// Singulation Distance Check, release for size 
IF ReleasedCount <> 0 THEN
	IF In_EncoderCount > ReleasedCount THEN
		ReleasedDistance := In_EncoderCount - ReleasedCount;
		RolloverDetect_ReleasedDist := 0;
	ELSE
		// If the encoder rolls to 0, capture the last distance as an offset
		IF RolloverDetect_ReleasedDist = 0 THEN
			RolloverDetect_ReleasedDist := ReleasedDistance;
		END_IF
		// The new distance to check is the number of pulses from the Cleared count to the rollover (RolloverDetect)
		// 	plus the current encoder count
		ReleasedDistance  := RolloverDetect_ReleasedDist + In_EncoderCount;
	END_IF
ELSE 
	ReleasedDistance :=0;
END_IF
	
// Check Held Distance less than Gap distance
IF Cfg_GappingDistance > HeldDistance THEN
	 // Test for an item at the grabber stop
		IF PE_Grabber THEN
		//Close Grabber
		Out_Grabber_1_Ext :=TRUE;
		Out_Grabber_1_Ret :=FALSE;	
		//Reset Release count
		ELSE
		//Open Grabber
		Out_Grabber_1_Ext :=FALSE;
		Out_Grabber_1_Ret :=TRUE;
		END_IF
	//Held distance greater than Gap, Released count less than Product size 
	ELSE
		IF Cfg_ProductSize > ReleasedDistance THEN
		//Open Grabber 
		Out_Grabber_1_Ext :=FALSE;
		Out_Grabber_1_Ret :=TRUE;
		//Held distance greater than Gap, Released Greater than Product size
		ELSIF PE_Grabber THEN
		//Close Gripper
		Out_Grabber_1_Ext :=TRUE;
		Out_Grabber_1_Ret :=FALSE;
		END_IF
END_IF

	
	
	
// Activate all the outputs in one place
//Status_Output.GRABBER_1_OCCUPIED := Grabber1(Active := In_Grabber_1_Auto, Extend:= Grabber_1_Extend, Retract := Grabber_1_Retract);
]]></ST>
    </Implementation>
    <LineIds Name="FB_TwoGripIndexer">
      <LineId Id="3" Count="5" />
      <LineId Id="156" Count="0" />
      <LineId Id="146" Count="9" />
      <LineId Id="145" Count="0" />
      <LineId Id="9" Count="3" />
      <LineId Id="167" Count="9" />
      <LineId Id="186" Count="0" />
      <LineId Id="190" Count="7" />
      <LineId Id="203" Count="1" />
      <LineId Id="208" Count="11" />
      <LineId Id="22" Count="0" />
      <LineId Id="228" Count="2" />
      <LineId Id="157" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="233" Count="1" />
      <LineId Id="237" Count="0" />
      <LineId Id="158" Count="1" />
      <LineId Id="238" Count="0" />
      <LineId Id="160" Count="3" />
      <LineId Id="331" Count="0" />
      <LineId Id="330" Count="0" />
      <LineId Id="328" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="334" Count="1" />
      <LineId Id="382" Count="0" />
      <LineId Id="381" Count="0" />
      <LineId Id="383" Count="1" />
      <LineId Id="333" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="372" Count="0" />
      <LineId Id="32" Count="11" />
      <LineId Id="387" Count="1" />
      <LineId Id="373" Count="0" />
      <LineId Id="255" Count="0" />
      <LineId Id="242" Count="0" />
      <LineId Id="374" Count="0" />
      <LineId Id="243" Count="10" />
      <LineId Id="44" Count="0" />
      <LineId Id="385" Count="1" />
      <LineId Id="375" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="45" Count="2" />
      <LineId Id="49" Count="0" />
      <LineId Id="361" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="345" Count="0" />
      <LineId Id="370" Count="0" />
      <LineId Id="354" Count="0" />
      <LineId Id="362" Count="0" />
      <LineId Id="355" Count="1" />
      <LineId Id="353" Count="0" />
      <LineId Id="363" Count="0" />
      <LineId Id="350" Count="0" />
      <LineId Id="457" Count="0" />
      <LineId Id="364" Count="0" />
      <LineId Id="351" Count="1" />
      <LineId Id="365" Count="0" />
      <LineId Id="357" Count="0" />
      <LineId Id="366" Count="0" />
      <LineId Id="358" Count="1" />
      <LineId Id="458" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="369" Count="0" />
      <LineId Id="368" Count="0" />
      <LineId Id="346" Count="1" />
      <LineId Id="64" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>