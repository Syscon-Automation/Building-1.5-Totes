<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="FB_TwoGripIndexer" Id="{a85c213a-95f5-4e83-8ef7-633ff596690f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_TwoGripIndexer
VAR_INPUT
	{attribute 'OPC.UA.DA' := '1'}
	In_ResetState	:	BOOL;		// Clear the current functional state of the Indexer

	In_Pause:	BOOL;
	In_ConveyorRunning			:	BOOL; //Added
	
	PE_Grabber:	BOOL;
	
	In_SV_Grabber_1_Extend	:	BOOL;
	In_SV_Grabber_1_Retract	:	BOOL;
	In_Grabber_1_Extended	:	BOOL;
	In_Grabber_1_Retracted	:	BOOL;
	
	In_EncoderCount			:	UINT;
	In_PEBlockCount			:	UINT;
	In_ReleaseCount			:	UINT;
	RolloverDetect 			:   UINT;
	
	Cfg_GappingDistance		:	UINT;	// Distance in encoder Pulses before the next item can be released
	Cfg_ProductSize		    :	UINT;	// Size(length) in encoder count of product for the grabber to retract for
END_VAR
VAR_OUTPUT
	{attribute 'OPC.UA.DA' := '1'}
	Out_Homed					:	BOOL;
	{attribute 'OPC.UA.DA' := '1'}
	Out_Ready					:	BOOL;
	{attribute 'OPC.UA.DA' := '1'}
	Out_Running					:	BOOL;
	
	Out_Grabber_1_Ext:	BOOL;
	Out_Grabber_1_Ret:	BOOL;

	{attribute 'OPC.UA.DA' := '1'}
	Status:		UINT;		// General Indexer  status
	Status_Output:	UINT;	// Indexer grabber status
	
END_VAR
VAR	
	StartUp		: BOOL := TRUE;
	rPE_Grabber_1: R_TRIG;
	fPE_Grabber_1: F_TRIG;
	
	tonHomeWait					:	TON := (PT := T#1S);
	tonReadyWait				:	TON := (PT := T#1S);
	tonRunningWait				:	TON := (PT := T#5S);
	
	rResetState	:	R_TRIG;
	// Extend and Retract controls
	Grabber_1_Extend		:	BOOL;
	Grabber_1_Retract		:	BOOL;
	
	BlockedPECount			:	UINT;
	ClearedPECount			:	UINT;
	ClearedDistance			:	UINT;

END_VAR

VAR CONSTANT
	// Output Status
	GRABBER_1_OCCUPIED:	UINT  := 1;
	
	// Singulation Status
	PAUSED:						UINT  := 0;
	PRODUCT_PRESENT:			UINT  := 1;
	PRODUCT_RELEASED:			UINT  := 2;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Process the In_ResetState
rResetState(CLK:=In_ResetState);

IF rResetState.Q THEN
	// Clear the Status
	Status := 0;
	// Revert to the StartUp state
	StartUp := TRUE;
	// Revert to the NOT Homed state
	Out_Homed := FALSE;
	tonHomeWait(IN := FALSE);
	// Revert to the NOT Ready state
	Out_Ready := FALSE;
	tonReadyWait(IN := FALSE);
	// Revert to the NOT Running state
	Out_Running := FALSE;
	tonRunningWait(IN := FALSE);
	// Clear the reset request
	// Clear the reset request
	In_ResetState := FALSE;
END_IF

// Home the 
IF StartUp  OR NOT Out_Homed OR NOT Out_Ready THEN
	Status.PAUSED := TRUE;
	
	tonHomeWait.IN := NOT Out_Homed;
	tonHomeWait();
	IF NOT Out_Homed THEN
		// Grabber
		Grabber_1_Retract := TRUE;
		Grabber_1_Extend := FALSE;
		IF In_Grabber_1_Retracted
		   THEN
			Out_Homed := tonHomeWait.Q;
		END_IF
	END_IF

	tonReadyWait.IN := NOT Out_Ready AND Out_Homed;
	tonReadyWait();
	IF NOT Out_Ready AND Out_Homed THEN

		IF In_Grabber_1_Retracted
		   THEN
			Out_Ready := tonReadyWait.Q;
		END_IF
	END_IF

	StartUp := NOT Out_Homed OR NOT Out_Ready;
	Out_Running := FALSE;
	
ELSIF In_Pause OR NOT In_ConveyorRunning THEN
	// Grabber
	Grabber_1_Retract := TRUE;
	Grabber_1_Extend := FALSE;

ELSIF NOT Out_Running THEN
	tonRunningWait.IN := NOT OUT_Running AND Out_Ready AND Out_Homed AND In_ConveyorRunning;
	tonRunningWait();
	Out_Running := tonRunningWait.Q;

ELSIF Out_Running THEN
	Status.PAUSED := FALSE;	
		// Call Actions That run while in running state?


	END_IF
	
// Call actions???	
	
	
	
	
	
	

	
// Singulation Distance Check, Hold for Gap
	IF In_EncoderCount > ClearedPECount THEN
		ClearedDistance := In_EncoderCount - ClearedPECount;
		RolloverDetect := 0;
	ELSE
		// If the encoder rolls to 0, capture the last distance as an offset
		IF RolloverDetect = 0 THEN
			RolloverDetect := ClearedDistance;
		END_IF
		// The new distance to check is the number of pulses from the Cleared count to the rollover (RolloverDetect)
		// 	plus the current encoder count
		ClearedDistance := RolloverDetect + In_EncoderCount;
	END_IF
	
// Singulation Distance Check, release for size 
	IF In_EncoderCount > ClearedPECount THEN
		ClearedDistance := In_EncoderCount - ClearedPECount;
		RolloverDetect := 0;
	ELSE
		// If the encoder rolls to 0, capture the last distance as an offset
		IF RolloverDetect = 0 THEN
			RolloverDetect := ClearedDistance;
		END_IF
		// The new distance to check is the number of pulses from the Cleared count to the rollover (RolloverDetect)
		// 	plus the current encoder count
		ClearedDistance := RolloverDetect + In_EncoderCount;
	END_IF
	
	// Release After Distance Requirement is satisfied
	IF ClearedDistance > Cfg_GappingDistance THEN
	
		// Test for an item at the grabber stop
		IF PE_Grabber THEN
			// PinStop
			
		END_IF
	END_IF
// Activate all the outputs in one place
Status_Output.GRABBER_1_OCCUPIED := Grabber1(Active := In_Grabber_1_Auto, Extend:= Grabber_1_Extend, Retract := Grabber_1_Retract);
]]></ST>
    </Implementation>
    <Action Name="a_ResetGrabbers" Id="{6c52f269-b6f9-4b55-b70b-15a4f08b6416}">
      <Implementation>
        <ST><![CDATA[// Grabber 1 Set
Grabber_1_Retract := FALSE;
Grabber_1_Extend := TRUE;
// Grabber 2 Set
Grabber_2_Retract := FALSE;
Grabber_2_Extend := TRUE;
]]></ST>
      </Implementation>
    </Action>
    <Method Name="Grabber1" Id="{dbb550bf-d0ad-4c23-8643-75a48f8ef06e}">
      <Declaration><![CDATA[METHOD Grabber1 : BOOL
VAR_INPUT
	Active	: BOOL;	
	Extend	: BOOL;
	Retract	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Active THEN
	IF Extend THEN
		Out_Grabber_1_Ext := TRUE;
		Out_Grabber_1_Ret := FALSE;
	ELSIF Retract THEN
		Out_Grabber_1_Ext := FALSE;
		Out_Grabber_1_Ret := TRUE;
	ELSE
		Out_Grabber_1_Ext := FALSE;
		Out_Grabber_1_Ret := TRUE;
	END_IF
ELSE
	Out_Grabber_1_Ext := FALSE;
	Out_Grabber_1_Ret := TRUE;
END_IF

Grabber1 := Out_Grabber_1_Ext OR In_Grabber_1_Extended;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_TwoGripIndexer">
      <LineId Id="3" Count="5" />
      <LineId Id="156" Count="0" />
      <LineId Id="146" Count="9" />
      <LineId Id="145" Count="0" />
      <LineId Id="9" Count="3" />
      <LineId Id="167" Count="9" />
      <LineId Id="186" Count="0" />
      <LineId Id="190" Count="7" />
      <LineId Id="203" Count="1" />
      <LineId Id="208" Count="11" />
      <LineId Id="22" Count="0" />
      <LineId Id="228" Count="2" />
      <LineId Id="157" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="233" Count="1" />
      <LineId Id="237" Count="0" />
      <LineId Id="158" Count="1" />
      <LineId Id="238" Count="0" />
      <LineId Id="160" Count="5" />
      <LineId Id="29" Count="14" />
      <LineId Id="255" Count="0" />
      <LineId Id="242" Count="11" />
      <LineId Id="44" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="45" Count="4" />
      <LineId Id="57" Count="0" />
      <LineId Id="60" Count="1" />
      <LineId Id="257" Count="0" />
      <LineId Id="64" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_TwoGripIndexer.a_ResetGrabbers">
      <LineId Id="2" Count="5" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_TwoGripIndexer.Grabber1">
      <LineId Id="3" Count="15" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>