<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="FB_Singulation" Id="{90a9a1ab-2280-409c-80d5-149a5fd26eda}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Singulation
VAR_INPUT
	{attribute 'OPC.UA.DA' := '1'}
	In_ResetState			:	BOOL;	// Clear the current functional state of the Singulator
	In_Pause				:	BOOL;
	In_FaultReset			:	BOOL;
	In_EncoderCount			:	UINT;	// Current encoder Pulse Count
	In_PE_GrabTrigger		:	BOOL;
	In_PE_ToteTrigger		:	BOOL;
	In_PE_ClearedTrigger	:	BOOL;
	In_ConveyorRunning		:	BOOL;
	
	In_Grabber_1_Auto		:	BOOL;
	In_Grabber_1_Extended	:	BOOL;
	In_Grabber_1_Retracted	:	BOOL;

	In_Grabber_2_Auto		:	BOOL;
	In_Grabber_2_Extended	:	BOOL;
	In_Grabber_2_Retracted	:	BOOL;

	In_PinStop_Auto			:	BOOL;
	In_PinStop_Extended		:	BOOL;
	In_PinStop_Retracted	:	BOOL;

	In_Hold_Request			:	BOOL;

	Cfg_GappingDistance		:	UINT;	// Distance in encoder Pulses before the next item can be released
	Cfg_TimeOutTime			:	TIME := T#3S;
	Cfg_RetryLimit			:	UINT;
END_VAR
VAR_OUTPUT
	Out_ReleaseFault		:	BOOL;

	Out_Grabber_1_Ext		:	BOOL;
	Out_Grabber_1_Ret		:	BOOL;

	Out_Grabber_2_Ext		:	BOOL;
	Out_Grabber_2_Ret		:	BOOL;

	Out_PinStop_Ext			:	BOOL;
	Out_PinStop_Ret			:	BOOL;

	Out_Homed				:	BOOL;
	Out_Ready				:	BOOL;
	Out_Running				:	BOOL;
	Out_Holding				:	BOOL;
	
	Status_Output			:	UINT;
	Status					:	UINT;
END_VAR
VAR	
	SingulatorClear			:	BOOL:= FALSE;

	RolloverDetect			:	UINT;	// Capture the last Distance when the Encoder count goes to zero
	GrabTrigger				:	R_TRIG;
	ClearedTriggerPE		:	F_TRIG;
	
	resumeFromPause   : F_TRIG;
	
	StartUp					:	BOOL := TRUE;

	ClearedPECount			:	UINT;	// Encoder Pulses when ClearedTriggerPE triggered
	ClearedDistance			:	UINT;	// Distance traveled since last item cleared
	Releasing				:	BOOL;
	ReleaseTimeOut			:	TON;
	BadReleaseCount			:	UINT;
	BadReleaseCount_Old		:	UINT;
	BadReleaseReTryTimer	:	TON;
	BadReleaseRetry			:	BOOL;

	rResetState				:	R_TRIG;

	tonHomeWait				:	TON := (PT := T#1S);
	tonReadyWait			:	TON := (PT := T#1S);
	tonRunningWait			:	TON := (PT := T#5S);

	// Extend and Retract controls
	Grabber_1_Extend		:	BOOL;
	Grabber_1_Retract		:	BOOL;

	Grabber_2_Extend		:	BOOL;
	Grabber_2_Retract		:	BOOL;

	PinStop_Extend			:	BOOL;
	PinStop_Retract			:	BOOL;
END_VAR

VAR CONSTANT
	// Output Status
	GRABBER_1_OCCUPIED		:	UINT  := 1;
	GRABBER_2_OCCUPIED		:	UINT  := 2;
	PINSTOP_OUT				:	UINT  := 3;
	
	// Singulation Status
	PAUSED					:	UINT  := 0;
	PRODUCT_PRESENT			:	UINT  := 1;
	PRODUCT_ENTERING_OCR	:	UINT  := 2;
	PRODUCT_READY_TO_PROCESS:	UINT  := 3;
	OCR_FINISHED			:	UINT  := 4;	
	PRODUCT_EXITING_OCR		:	UINT  := 5;
	RETURN_CONVEYOR_CLEARING:	UINT  := 6;
	RETURN_CONVEYOR_BUSY	:	UINT  := 7;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
	There are two states to the singulation device, releasing and not releasing
	While releasing
		The appropriate grippers are extended:
			- the upsream gripper for all carriers
			- the downstream gripper for racks, totes are detected by the tote sensor at the pin-stop
		When the appropriate grippers are extended (detected using the not-retracted sensor, because the widths of the carriers vary)
			- the pin stop is retracted
			- the downstream photo-eye is monitored for a falling edge to determing if the carrier has exited the singulator
		When the carrier has exited the singulator
			- Releasing is turned off and the state for not releasing is activated
	While not releasing
		The pin stop is extended
		The grippers are retracted when the pin stop is detected in the extended state
		
	The releasing state is enabled when:
		- The distance that the carrier has to travel after exiting the singulator has been traveled by the carrier

	The releasing state is set when:
		- A carrier is detected at the pin stop

	At start-up:
		- the conveyor is not allowed to run
		- all singulation photo-eyes must be clear
			- PE_GrabTrigger, photo-eye at the pin-stop
			- PE_ClearedTrigger, photo-eye downstream of the pin-stop
			- PE_ToteTrigger, photo-eye that detects tote at the pin-stop
		- the device is homed
			- both grippers are retracted to detect home
			- the pin-stop is retracted to detect home
		- after homing, the device is put into a ready state
			- the pin-stop is extended and detected in the extended state
			- the grappers remain retracted are detected in the retracted state
	A release fault is set if it takes too long for a carrier to clear the PE_ClearedTrigger PE (Cfg_TimeOutTime)
	A release can be attempted multiple time (Cfg_RetryLimit). Practically, the release should be attempted once and failed to
		prevent damage to carriers or the specimens they are transporting
	A release fault can only be reset when the device PE's are all clear, to allow a the start-up sequence to be processed
*)

// Process the In_ResetState
rResetState(CLK:=In_ResetState);

// State reset or fault reset clear that current device state and cause the device to start-up again
IF rResetState.Q OR (In_FaultReset AND Out_ReleaseFault) THEN
	// Revert to the StartUp state
	StartUp := TRUE;
	// Revert to the NOT Homed state
	Out_Homed := FALSE;
	tonHomeWait(IN := FALSE);
	// Revert to the NOT Ready state
	Out_Ready := FALSE;
	tonReadyWait(IN := FALSE);
	// Revert to the NOT Running state
	Out_Running := FALSE;
	tonRunningWait(IN := FALSE);

	Out_ReleaseFault := FALSE;
	BadReleaseCount := 0;
	
	Releasing := FALSE;

	// Clear the reset request
	In_ResetState := FALSE;
END_IF

// Use all photo-eyes to determine that the device is clear and can be started up
SingulatorClear := (NOT In_PE_GrabTrigger AND NOT In_PE_ClearedTrigger AND NOT In_PE_ToteTrigger);

// If a start-up is initiated with carriers in the device, set a release fault and cancel the start up
IF StartUp AND NOT SingulatorClear THEN
	Out_ReleaseFault := TRUE;
	StartUp := FALSE;
END_IF

// Home the actuators
IF (StartUp OR NOT Out_Homed OR NOT Out_Ready) AND SingulatorClear THEN
	Status.PAUSED := TRUE;
	
	tonHomeWait.IN := NOT Out_Homed;
	tonHomeWait();

	// Homed is Grabbers retracted and PinStop retracted
	IF NOT Out_Homed THEN
		// Grabber 1
		Grabber_1_Retract := TRUE;
		Grabber_1_Extend := FALSE;
		// Grabber 2
		Grabber_2_Retract := TRUE;
		Grabber_2_Extend := FALSE;
		// PinStop
		PinStop_Retract := TRUE;
		PinStop_Extend := FALSE;
		IF In_Grabber_1_Retracted
		   AND In_Grabber_2_Retracted
		   AND In_PinStop_Retracted
		   THEN
			Out_Homed := tonHomeWait.Q;
		END_IF
	END_IF

	// Ready is Grabbers retracted and PinStop extended
	// All PE's have to be clear for the equipment to be ready
	tonReadyWait.IN := NOT Out_Ready AND Out_Homed AND SingulatorClear;
	tonReadyWait();
	IF NOT Out_Ready AND Out_Homed AND tonReadyWait.IN THEN
		// PinStop
		PinStop_Retract := FALSE;
		PinStop_Extend := TRUE;
		IF In_Grabber_1_Retracted
		   AND In_Grabber_2_Retracted
		   AND In_PinStop_Extended
		   THEN
			Out_Ready := tonReadyWait.Q;
		END_IF
	END_IF

	StartUp := NOT Out_Homed OR NOT Out_Ready;
	Out_Running := FALSE;
	BadReleaseCount := 0;
	Out_ReleaseFault := FALSE;
	Releasing := FALSE;

ELSIF NOT Out_Running THEN

	// Run a timer when the conveyor is running to allow the conveyor to be up-to-speed before actuating any devices
	tonRunningWait.IN := NOT OUT_Running AND Out_Ready AND Out_Homed AND In_ConveyorRunning;
	tonRunningWait();
	Out_Running := tonRunningWait.Q;

	// When Out_Running is turned on, capture the encoder count to allow the release of product when it is detected	
	IF Out_Running THEN
		ClearedPECount := In_EncoderCount;
		Status.PRODUCT_PRESENT := FALSE;
	END_IF
	
ELSIF Out_Running THEN
	Status.PAUSED := FALSE;
	
	// Request to Hold all items
	// Allows external control of the release according to programmed conditions
	IF In_Hold_Request THEN
		// When the pin stop is extended, turn on that the singlulator is holding
		IF In_PinStop_Extended THEN
			Out_Holding := TRUE;
		END_IF
	ELSE
		Out_Holding := FALSE;
	END_IF

	// Singulation Distance Check
	IF In_EncoderCount > ClearedPECount THEN
		ClearedDistance := In_EncoderCount - ClearedPECount;
		RolloverDetect := 0;
	ELSE
		// If the encoder rolls to 0, capture the last distance as an offset
		IF RolloverDetect = 0 THEN
			RolloverDetect := ClearedDistance;
		END_IF
		// The new distance to check is the number of pulses from the Cleared count to the rollover (RolloverDetect)
		// 	plus the current encoder count
		ClearedDistance := RolloverDetect + In_EncoderCount;
	END_IF

	// Release After Distance Requirement is satisfied
	IF ClearedDistance > Cfg_GappingDistance AND NOT Status.PRODUCT_PRESENT THEN
		// Use bit 1 to indicate that the required distance has been cleared to allow the next carrier to be released
		Status.PRODUCT_PRESENT := TRUE;
	END_IF

	// When "PRODUCT_PRESENT" which means that the release distance has been met
	// 	begin to process the RELEASING status
	IF Status.PRODUCT_PRESENT THEN
		// Test for the Holding State
		// Prevent transtion to Releasing while in the holding state
		IF NOT Out_Holding THEN
			// Trigger Releasing when the grab PE is blocked
			IF In_PE_GrabTrigger THEN
				Releasing := TRUE;
			END_IF
		END_IF	
	END_IF

	// Watch release and pin-stop state to make sure product comes through, run timer if not
	ReleaseTimeOut(IN:= Releasing AND In_PinStop_Retracted, PT:= Cfg_TimeOutTime, Q=> , ET=> );

	// Watch for released cleared PE
	// This is a falling-edge trigger that will go true when the cleard photo-eye is blocked
	//	and go false when the cleared photo-eye is cleared
	// Releasing has to remain on while waiting for the cleared trigger photo-eye to transitino
	ClearedTriggerPE(CLK:= (Releasing AND In_PE_ClearedTrigger));

(*	Clearing the photo-eye will:
		- Clear the bad release count
		- Set the In_Encoder count to test for the next release
		- Transition OUT of the releasing state
*)
	IF ClearedTriggerPE.Q THEN
		BadReleaseCount := 0;
		ClearedPECount := In_EncoderCount;
		ClearedDistance := 0;
		Releasing := FALSE;
		Status.PRODUCT_PRESENT := FALSE;
(*
	If the release times out, the BadReleaseCount will be incremented
	In the subsequent code, a non-zero bad release count that exceeds the release attempt limit will set a release fault
	The release fault can only be reset when the device photo-eyes are clear and the reset in issued
	The reset will cause the device to enter its start-up state and home and ready itself
*)
	ELSIF ReleaseTimeOut.Q THEN
		BadReleaseCount := BadReleaseCount + 1;
	END_IF

	// When the Cfg_RetryLimit is exceeded, set the fault
	// This retry limit should always be zero to prevent damage to carriers and specimen because the carrier may be in the path of the 
	// pin-stop
	// Setting the fault does not change the releasing state to prevent carrier/specimen damage and requires the device to be reset
	IF BadReleaseCount >= Cfg_RetryLimit THEN
		Out_ReleaseFault := TRUE;
	END_IF

	// Retry release if Bad release
	// This process originally reset the grippers and pin-stop, along with clearing the releasing state
	// It now only allows an X multiplier of the TimeOutTime for a longer release attempt
	// Actuating the pin-stop could damage carriers/specimen and was disabled
	BadReleaseRetry := (BadReleaseCount > 0) AND (BadReleaseCount <> BadReleaseCount_Old) AND NOT Out_ReleaseFault;
	BadReleaseReTryTimer(IN:= BadReleaseRetry, PT:= T#1S);
	IF BadReleaseReTryTimer.Q THEN
		BadReleaseCount_Old := BadReleaseCount;
	END_IF

ELSE
	// When we aren't detecting any valid state above, turn off Releasing to extend the grippers until the pin-stop is extended
	// This should never be executed but is here just-in-case
	// NOT Out_Running should catch all unknown states and prevent the transition to Out_Running based on the homed and ready states
	Releasing := FALSE;
END_IF

// Only process if we are Ready
// Actuation is controlled for all other states during start-up
IF Out_Ready THEN
	// Test for Releasing and actuate accordingly and pause request
	// In_Pause and In_Hold_Request perform the samd function, but at different stages of the process
	// In_Pause affect the system when it is releasing
	// In_Hold prevent the system from transitioning into the Releasing state
	IF Releasing AND NOT In_Pause THEN
		// Grabber 1 - Always Extend
		Grabber_1_Retract := FALSE;
		Grabber_1_Extend := TRUE;
		// Grabber 2 - Extend only when a tote is not detected
		IF In_PE_ToteTrigger THEN
			Grabber_2_Retract := TRUE;
			Grabber_2_Extend := FALSE;
		ELSE
			Grabber_2_Retract := FALSE;
			Grabber_2_Extend := TRUE;
		END_IF
		// Only process the pin-stop when the gripper(s) are not in the retracted state
		// Only check grabber 1 because grabber 2 could remain retracted for a tote
		IF NOT In_Grabber_1_Retracted THEN
			// PinStop retract when the grippers are holding
			PinStop_Retract := TRUE;
			PinStop_Extend := FALSE;
		END_IF
	// When not releasing, only actuate the pin-stop when the device is clear to prevent damage to carriers and/or specimen
	ELSE
		IF SingulatorClear THEN
			// PinStop extend when the device is clear
			PinStop_Retract := FALSE;
			PinStop_Extend := TRUE;
			// Only process the grabbers when the pin-stop is in the extended state
			IF In_PinStop_Extended THEN
				// Grabber 1 - Always Retract
				Grabber_1_Retract := TRUE;
				Grabber_1_Extend := FALSE;
				// Grabber 2 - Always Retract
				Grabber_2_Retract := TRUE;
				Grabber_2_Extend := FALSE;
			END_IF
		// When the device is not clear and we are not releasing, extend both grabbers
		ELSE
			// Grabber 1 - Always Extend when the singulator is not clear
			Grabber_1_Retract := FALSE;
			Grabber_1_Extend := TRUE;
			// Grabber 2 - Always Extend when the singulator is not clear
			Grabber_2_Retract := FALSE;
			Grabber_2_Extend := TRUE;
		END_IF
	END_IF
END_IF

// Activate all the outputs in one place
Status_Output.GRABBER_1_OCCUPIED := Grabber1(Active := In_Grabber_1_Auto, Extend:= Grabber_1_Extend, Retract := Grabber_1_Retract);
Status_Output.GRABBER_2_OCCUPIED := Grabber2(Active := In_Grabber_2_Auto, Extend:= Grabber_2_Extend, Retract := Grabber_2_Retract);
Status_Output.PINSTOP_OUT := PinStop(Active:= In_PinStop_Auto, Extend := PinStop_Extend, Retract:= PinStop_Retract);]]></ST>
    </Implementation>
    <Action Name="a_HoldProduct" Id="{7f5172fb-ebc5-4859-80c8-0ce199410c44}">
      <Implementation>
        <ST><![CDATA[	// Grabber 1
	Grabber_1_Retract := FALSE;
	Grabber_1_Extend := TRUE;
	
	// Grabber 2
	Grabber_2_Retract := FALSE;
	Grabber_2_Extend := TRUE;

]]></ST>
      </Implementation>
    </Action>
    <Action Name="a_ResetGrabbers" Id="{0f6d0a35-4d6a-444f-b0fc-0d8b5f006497}">
      <Implementation>
        <ST><![CDATA[// Grabber 1 Retract
Grabber_1_Retract := TRUE;
Grabber_1_Extend := FALSE;
// Grabber 2 Retract
Grabber_2_Retract := TRUE;
Grabber_2_Extend := FALSE;
// PinStop Extend
PinStop_Retract := FALSE;
PinStop_Extend := TRUE;
// Reset Releasing
Releasing := FALSE;]]></ST>
      </Implementation>
    </Action>
    <Method Name="Grabber1" Id="{4c24c07a-cb45-4f62-9a61-e207017251fa}">
      <Declaration><![CDATA[METHOD Grabber1 : BOOL
VAR_INPUT
	Active	: BOOL;	
	Extend	: BOOL;
	Retract	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Active THEN
	IF Extend THEN
		Out_Grabber_1_Ext := TRUE;
		Out_Grabber_1_Ret := FALSE;
	ELSIF Retract THEN
		Out_Grabber_1_Ext := FALSE;
		Out_Grabber_1_Ret := TRUE;
	ELSE
		Out_Grabber_1_Ext := FALSE;
		Out_Grabber_1_Ret := FALSE;
	END_IF
ELSE
	Out_Grabber_1_Ext := FALSE;
	Out_Grabber_1_Ret := FALSE;
END_IF

Grabber1 := Out_Grabber_1_Ext OR In_Grabber_1_Extended;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Grabber2" Id="{be900dd0-b95c-49fe-a4c7-a6c5b69d06d1}">
      <Declaration><![CDATA[METHOD Grabber2 : BOOL
VAR_INPUT
	Active	: BOOL;	
	Extend	: BOOL;
	Retract	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Active THEN
	IF Extend THEN
		Out_Grabber_2_Ext := TRUE;
		Out_Grabber_2_Ret := FALSE;
	ELSIF Retract THEN
		Out_Grabber_2_Ext := FALSE;
		Out_Grabber_2_Ret := TRUE;
	ELSE
		Out_Grabber_2_Ext := FALSE;
		Out_Grabber_2_Ret := FALSE;
	END_IF
ELSE
	Out_Grabber_2_Ext := FALSE;
	Out_Grabber_2_Ret := FALSE;
END_IF

Grabber2 := Out_Grabber_2_Ext OR In_Grabber_2_Extended;]]></ST>
      </Implementation>
    </Method>
    <Method Name="PinStop" Id="{a2c42692-ac29-4ee3-9efe-a4c8eef09923}">
      <Declaration><![CDATA[METHOD PinStop : BOOL
VAR_INPUT
	Active	: BOOL;	
	Extend	: BOOL;
	Retract	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Active THEN
	IF Extend THEN
		Out_PinStop_Ext := TRUE;
		Out_PinStop_Ret := FALSE;
	ELSIF Retract THEN
		Out_PinStop_Ext := FALSE;
		Out_PinStop_Ret := TRUE;
	ELSE
		Out_PinStop_Ext := FALSE;
		Out_PinStop_Ret := FALSE;
	END_IF
ELSE
	Out_PinStop_Ext := FALSE;
	Out_PinStop_Ret := FALSE;
END_IF

PinStop := Out_PinStop_Ext OR In_PinStop_Extended;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>