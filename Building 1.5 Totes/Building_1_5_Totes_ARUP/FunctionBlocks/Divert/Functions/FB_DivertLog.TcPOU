<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="FB_DivertLog" Id="{dffd4819-1436-437c-ba4c-f557df3024a3}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_DivertLog
VAR_IN_OUT
	DivertArray	: ARRAY[*] OF ST_Divert;
END_VAR
VAR_INPUT
	DivertLogEnable		:	UDINT;
	EncoderCounts		:	UDINT;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	DivertCountMax			: DINT;
	DivertCountMin			: DINT;
	DivertIndex				: DINT;
	r_DivertExtend			: ARRAY [1..16] OF R_TRIG;
	f_DivertExtend			: ARRAY [1..16] OF F_TRIG;
	r_ConfirmPE				: ARRAY [1..16] OF R_TRIG;
	f_ConfirmPE				: ARRAY [1..16] OF F_TRIG;
	sMessage				: STRING;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Get the Max and Min counts
DivertCountMin := LOWER_BOUND(DivertArray,1);
DivertCountMax := UPPER_BOUND(DivertArray,1);

FOR DivertIndex := DivertCountMin TO DivertCountMax DO
	// Divert at DivertIndex
	r_DivertExtend[DivertIndex](CLK := DivertArray[DivertIndex].Output1);
	f_DivertExtend[DivertIndex](CLK := DivertArray[DivertIndex].Output1);
	
	IF r_DivertExtend[DivertIndex].Q THEN
		// Mask the divert index to see if it should be logged
		IF ((DivertLogEnable AND LREAL_TO_UDINT(EXPT(2,DivertIndex))) > 0) THEN
			sMessage := DINT_TO_STRING(DivertIndex);
			sMessage := CONCAT(sMessage,' : ');
			sMessage := CONCAT(sMessage, UDINT_TO_STRING(EncoderCounts));
			ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG
				, msgFmtStr := CONCAT(DivertArray[DivertIndex].Config.ID, ' Extend Divert %s')
				, strArg := sMessage); 
		END_IF;
	END_IF
	IF f_DivertExtend[DivertIndex].Q THEN
		// Mask the divert index to see if it should be logged
		IF ((DivertLogEnable AND LREAL_TO_UDINT(EXPT(2,DivertIndex))) > 0) THEN
			sMessage := DINT_TO_STRING(DivertIndex);
			sMessage := CONCAT(sMessage,' : ');
			sMessage := CONCAT(sMEssage, UDINT_TO_STRING(EncoderCounts));
			ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG
				, msgFmtStr := CONCAT(DivertArray[DivertIndex].Config.ID, ' Retract Divert %s')
				, strArg := sMessage); 
		END_IF;
	END_IF
	
	// Confirm at DivertIndex
	r_ConfirmPE[DivertIndex](CLK := DivertArray[DivertIndex].ConfirmPE);
	f_ConfirmPE[DivertIndex](CLK := DivertArray[DivertIndex].ConfirmPE);
	
	IF r_ConfirmPE[DivertIndex].Q THEN
		// Mask the convirm index to see if it should be logged
		IF ((DivertLogEnable AND LREAL_TO_UDINT(EXPT(2,(DivertIndex+15)))) > 0) THEN
			sMessage := DINT_TO_STRING(DivertIndex);
			sMessage := CONCAT(sMessage,' Blocked: ');
			sMessage := CONCAT(sMEssage, UDINT_TO_STRING(EncoderCounts));
			ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG
				, msgFmtStr := CONCAT(DivertArray[DivertIndex].Config.ID, ' Configm PE %s')
				, strArg := sMessage); 
		END_IF;
	END_IF
	IF f_ConfirmPE[DivertIndex].Q THEN
		// Mask the convirm index to see if it should be logged
		IF ((DivertLogEnable AND LREAL_TO_UDINT(EXPT(2,(DivertIndex+15)))) > 0) THEN
			sMessage := DINT_TO_STRING(DivertIndex);
			sMessage := CONCAT(sMessage,' Cleared: ');
			sMessage := CONCAT(sMEssage, UDINT_TO_STRING(EncoderCounts));
			ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG
				, msgFmtStr := CONCAT(DivertArray[DivertIndex].Config.ID, ' Configm PE %s')
				, strArg := sMessage); 
		END_IF;
	END_IF
END_FOR]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>