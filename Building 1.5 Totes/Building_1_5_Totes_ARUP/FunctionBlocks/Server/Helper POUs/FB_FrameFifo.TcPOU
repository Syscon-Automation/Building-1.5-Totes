<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="FB_FrameFifo" Id="{b6bfa284-76f0-46f7-b8d6-91dbea9da8f5}" SpecialFunc="None">
    <Declaration><![CDATA[(* Tx/Rx (string data) fifo control function block *)
FUNCTION_BLOCK FB_FrameFifo
VAR_INPUT
	bLog		: BOOL			:= FALSE;(* TRUE => Enable log message output, FALSE => Disable *)
	sPrefix		: STRING		:= 'Unknown::';(* Log message description string (allows the identification of log message source) *)
	sPut		: T_MaxString 	:= ''; (* String message to add (write) to the fifo *)
END_VAR
VAR_OUTPUT
	bOk			: BOOL; 	 	(* TRUE = New entry added or removed succesfully, FALSE = Fifo overflow or fifo empty *)
	sGet		: T_MaxString 	:= '';(* String message removed (read) from fifo *)
	nCount		: UDINT			:= 0;(* Number of fifo entries *)
	cbFree		: UDINT 		:= 0;(* Free buffer space *)
	msgType		: SINT;			// Extract the message type to determine if we are logging it
	ncbSize		: UDINT;		// (*Buffer assigned bytes*)
END_VAR
VAR
	fbBuffer 	: FB_StringRingBuffer := (bOverwrite := FALSE);(* Basic (lower level) string buffer control function block *)
	buffer		: ARRAY[-3..ServerControl.PLCPRJ_BUFFER_SIZE] OF BYTE;(* Internal buffer memory *)
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[;]]></ST>
    </Implementation>
    <Action Name="AddTail" Id="{abfceafb-a8be-4d53-8e9c-7963c0567216}">
      <Implementation>
        <ST><![CDATA[(* Adds new fifo entry *)
fbBuffer.A_AddTail( pBuffer:= ADR(buffer), cbBuffer:= SIZEOF(buffer),
					putValue:= sPut, bOk=>bOk, nCount=>nCount, cbSize=>ncbSize );

IF bOk THEN
	cbFree := ServerControl.PLCPRJ_BUFFER_SIZE - fbBuffer.cbSize;(* Calculate the free buffer space *)
	IF bLog THEN(* Log message *)
		msgType := STRING_TO_SINT(MID(sPut,2,2));
		// Ignore frequent messages
		IF (msgType = TransportCommand_05 AND nMessageLogEnable.TransportCommand_05)
		   OR (msgType = E_MessageIds.LocationUpdateResponse_07 AND nMessageLogEnable.LocationUpdateResponse_07)
		   OR (msgType = E_MessageIds.EquipmentStatusResponse_08 AND nMessageLogEnable.EquipmentStatusResponse_08)
		   OR (msgType = E_MessageIds.KeepAlive_09 AND nMessageLogEnable.KeepAlive_09)
		   OR (msgType = E_MessageIds.Arrival_23 AND nMessageLogEnable.Arrival_23)
		   OR (msgType = E_MessageIds.TransportResponse_25 AND nMessageLogEnable.TransportResponse_25)
		   OR (msgType = E_MessageIds.TransportComplete_26 AND nMessageLogEnable.TransportComplete_26)
		   OR (msgType = E_MessageIds.LocationUpdate_27 AND nMessageLogEnable.LocationUpdate_27)
		   OR (msgType = E_MessageIds.EquipmentStatusUpdate_28 AND nMessageLogEnable.EquipmentStatusUpdate_28)
		   OR (msgType = E_MessageIds.KeepAliveResponse_29 AND nMessageLogEnable.KeepAliveResponse_29)
		   OR (msgType = E_MessageIds.NoMessage_00)
		   THEN
			ADSLOGSTR( ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG, CONCAT( sPrefix, '"%s"' ), sPut );
		END_IF
	END_IF
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="Clear" Id="{e5441350-2084-48f4-bd19-856293ebd4b1}">
      <Implementation>
        <ST><![CDATA[(* Resets fifo = clears all data *)
fbBuffer.A_Reset( pBuffer:= ADR(buffer), cbBuffer:= SIZEOF(buffer),
				bOk=>bOk, getValue=>sGet, nCount=>nCount, cbSize=>ncbSize );
cbFree := ServerControl.PLCPRJ_BUFFER_SIZE;(* Free buffer size *)

sPut := CONCAT(CONCAT( sPrefix, 'Frame Buffer Cleared' ), CONCAT( CONCAT('::Queued Strings ', UDINT_TO_STRING(nCount)),CONCAT('::Used Buffer Size ', UDINT_TO_STRING(ncbSize))) );

IF bOk THEN
	IF bLog THEN(* Log information message *)
		ADSLOGSTR( ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG, '%s', sPut );	
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Action>
    <Action Name="RemoveHead" Id="{fdedd4c5-4667-45fb-a700-e608891979aa}">
      <Implementation>
        <ST><![CDATA[(* Removes oldest fifo entry *)
fbBuffer.A_RemoveHead( pBuffer:= ADR(buffer), cbBuffer:= SIZEOF(buffer),
						bOk=>bOk, getValue=>sGet, nCount=>nCount );
IF bOk THEN
	cbFree := ServerControl.PLCPRJ_BUFFER_SIZE - fbBuffer.cbSize;(* Calculate the free buffer space *)
END_IF]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="FB_FrameFifo">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_FrameFifo.AddTail">
      <LineId Id="2" Count="2" />
      <LineId Id="28" Count="0" />
      <LineId Id="5" Count="2" />
      <LineId Id="10" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="19" Count="7" />
      <LineId Id="29" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_FrameFifo.Clear">
      <LineId Id="2" Count="2" />
      <LineId Id="1" Count="0" />
      <LineId Id="6" Count="7" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_FrameFifo.RemoveHead">
      <LineId Id="2" Count="4" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>