<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="FB_ServerApplication" Id="{6a84e1ca-a433-48dd-ba76-3be472cf9286}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ServerApplication
VAR_INPUT
	TxMessage :	STRING(55);		// Message to Transmit
	bTransmitTrigger: BOOL;		// Trigger to add TxMessage to the TCP/IP send Buffer (TRUE= Trasmit On Rising Edge Only)
END_VAR
VAR_IN_OUT
	fbTx 		: FB_FrameFifo;(* TX fifo *)
	fbRx 		: FB_FrameFifo;(* RX fifo *)
	fbLog		: FB_LogFifo;(* Log message fifo *)
END_VAR
VAR_OUTPUT
	TxCounter	: UDINT;	// Shows that the transmit message was added to the transmt buffer 
	RxCounter	: UDINT;	// Shows that a message was recieved
	RxRawMessage: STRING(255);		// Message output
END_VAR
VAR
	sToClient	: T_MaxString := '';
	sFromClient	: T_MaxString := '';
	sLogMessage	: T_MaxString := '';
	TxTrigger: R_TRIG;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*------------------- Send message strings ------------------------------------*)
// TxTrigger(CLK:= bTransmitTrigger);

IF (* TxTrigger.Q*) bTransmitTrigger  THEN(* Send string to server *)
	
	sToClient := TxMessage; // Message
 		
	fbTx.AddTail( sPut := sToClient );(* Put string to the tx fifo *)
	IF NOT fbTx.bOk THEN(* TX fifo overflow => log error *)
		fbLog.Error( sMessage := 'FB_FrameFifo(sender)', nErrID := ServerControl.PLCPRJ_ERROR_SENDFIFO_OVERFLOW );
	END_IF
	
	TxCounter := TxCounter  + 1;
	// bTransmitTrigger := FALSE;
END_IF

(*------------------------------- Get received message strings ---------------------------------*)
REPEAT
	fbRx.RemoveHead( );(* Fetch string from rx fifo *)
	IF fbRx.bOk THEN(* Success *)
		
		sFromClient := fbRx.sGet;
		RxRawMessage := sFromClient;	// This could be set on line above left seperate in case some manipulation was needed before sending out
		
	(* Send back what was recieved for testing
		fbTx.AddTail( sPut := sToClient );(* Put string to the tx fifo *)
		IF NOT fbTx.bOk THEN(* TX fifo overflow => log error *)
			fbLog.Error( sMessage := 'FB_FrameFifo(sender)', nErrID := ServerControl.PLCPRJ_ERROR_SENDFIFO_OVERFLOW ); 
		END_IF
	*)
	
		RxCounter := RxCounter +1;  // Increment counter to show that data was recieved
		
		
	END_IF
UNTIL NOT fbRx.bOk
END_REPEAT

(*------------------------------- Get log/error messages from log fifo ---------------------------*)
REPEAT
	fbLog.Remove( );
	IF fbLog.bOk THEN(* Success *)
		
		(* TODO: Implement log message handler *)
		sLogMessage := fbLog.sGet;
		
	END_IF
UNTIL NOT fbLog.bOk
END_REPEAT]]></ST>
    </Implementation>
    <LineIds Name="FB_ServerApplication">
      <LineId Id="53" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="55" Count="1" />
      <LineId Id="59" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="63" Count="4" />
      <LineId Id="103" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="51" Count="1" />
      <LineId Id="3" Count="4" />
      <LineId Id="12" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="190" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="18" Count="3" />
      <LineId Id="191" Count="0" />
      <LineId Id="74" Count="1" />
      <LineId Id="77" Count="0" />
      <LineId Id="22" Count="14" />
    </LineIds>
  </POU>
</TcPlcObject>