<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="FB_ServerConnection" Id="{9a938bd0-a6e6-42ff-8c55-c498bff2653c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ServerConnection
VAR_IN_OUT
	fbTx 			: FB_FrameFifo;(* TX fifo *)
	fbRx 			: FB_FrameFifo;(* RX fifo *)
	fbLog			: FB_LogFifo;(* Log message fifo *)
	hListener		: T_HSOCKET;(* Listener socket handle *)
	bReset			: BOOL;
END_VAR
VAR_INPUT
	sSrvNetID		: T_AmsNetID	:= '';(* TwinCAT TCP/IP server network address *)
	bEnable 		: BOOL 			:= FALSE;(* TRUE => connect and exchange data, FALSE => disconnect *)
	tReconnect 		: TIME 			:= T#1S;(* Accept new connection (reconnect) after this time *)
	bLog			: BOOL			:= FALSE;(* TRUE => Enable log message output, FALSE => Disable *)
	sPrefix			: STRING 		:= 'SERVERx::';(* Log message description string (allows the identification of log message source) *)
	bAllowConnect	: BOOL;
END_VAR
VAR_OUTPUT
	bConnecting		: BOOL;						(*Indicate that this server connection is attempting to connect*)
	bAccepted		: BOOL			:= FALSE;(* Accepted connection status *)
	TestBuffer 		: ARRAY[0..ServerControl.PLCPRJ_BUFFER_SIZE] OF BYTE;
END_VAR
VAR
	{attribute 'OPC.UA.DA' := '1'}
	fbAccept 		: FB_SocketAccept;
	fbClose			: FB_SocketClose;
	fbReceive		: FB_SocketReceive;
	fbSend			: FB_SocketSend;
	eStep			: E_ConnectionSteps;
	bSndBusy 		: BOOL;(* Tx state *)
	bRcvBusy 		: BOOL;(* Rx state *)
	bDisconnect		: BOOL;(* Disconnect flag, if set the socket will be closed *)

	fbAcceptTimer	: TON;(* Accept poll timer *)
	fbPollTimer		: TON;(* Receive poll timer *)
	fbRequestTimer	: TON;(* Request timeout timer *)
	
	rxBuffer		: ARRAY[0..ServerControl.PLCPRJ_BUFFER_SIZE] OF BYTE;
	sTxFrame		: T_MaxString;
	sRxFrame		: T_MaxString;
	cbReceived		: UDINT;
	nLenOfString	: UDINT;(* String length inclusive the null delimiter *)
	bEndOfString	: BOOL := FALSE;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
	Determine the current state of this connection
*)
CASE eStep OF
	(*
		IDLE connections test for Enable and Accepted to change states
		IDLE transitions to CONNECT_START when not accepted and to CLOSE_START when not enabled and accepted
		IDLE transitons to DATAEXCHANGE when enabled and accepted 
	*)
	eCONNECTION_STATE_IDLE:
		IF bEnable XOR bAccepted THEN
			IF bEnable THEN
				fbAcceptTimer( IN := TRUE );
				IF fbAcceptTimer.Q  AND bAllowConnect THEN
					
					fbTx.Clear( sPrefix := CONCAT( sPrefix, 'FB_FrameFifo(send)::' ), bLog := bLog );(* Clear send fifo *)
					fbRx.Clear( sPrefix := CONCAT( sPrefix, 'FB_FrameFifo(recv)::' ), bLog := bLog );(* Clear receiver fifo *)
					fbLog.Clear( sPrefix := sPrefix, bLog := bLog );(* Clear log fifo *)
					bSndBusy := FALSE;
					bRcvBusy := FALSE;
					bDisconnect := FALSE;
					cbReceived := 0;
					
					fbPollTimer( IN := FALSE, PT := T#0S );
					fbRequestTimer( IN := FALSE, PT := ServerControl.PLCPRJ_RECEIVE_TIMEOUT );
					fbAcceptTimer( IN := FALSE, PT := tReconnect );
					
					eStep := eCONNECTION_STATE_CONNECT_START;
				END_IF
			ELSE
				eStep := eCONNECTION_STATE_CLOSE_START;
			END_IF
		ELSIF bAccepted THEN
			eStep := eCONNECTION_STATE_DATAEXCHANGE;
		ELSE
			fbAcceptTimer( IN := FALSE, PT := T#0S );
		END_IF
	(*
		CONNECT_START transitions to CONNECT_WAIT after initiating an FB_SocketAccept call
		bConnecting is used to limit accept attempts to a single accept at a time
	*)
	eCONNECTION_STATE_CONNECT_START:
		fbAccept( bExecute := FALSE );
		fbAccept( sSrvNetID := sSrvNetID, 
					hListener := hListener, 
					bExecute:= TRUE );
		eStep := eCONNECTION_STATE_CONNECT_WAIT;
		bConnecting := TRUE;

	eCONNECTION_STATE_CONNECT_WAIT:
		fbAccept( bExecute := FALSE );
		IF NOT fbAccept.bBusy THEN
			bConnecting := FALSE;
			IF NOT fbAccept.bError THEN
				IF fbAccept.bAccepted THEN
					bAccepted := TRUE;
					fbLog.Message( sMessage := 'Connection accepted!', hSocket := fbAccept.hSocket );
				END_IF
				eStep := eCONNECTION_STATE_IDLE;
			ELSE
				fbLog.Error( sMessage := 'FB_SocketAccept()', nErrId := fbAccept.nErrId );
				eStep := eCONNECTION_STATE_ERROR;
			END_IF
		END_IF

	eCONNECTION_STATE_DATAEXCHANGE:(* Data exchange state *)
		bDisconnect := NOT bEnable OR bDisconnect;(* User/internal disconnect requested? *)
		IF bDisconnect AND NOT bSndBusy AND NOT bRcvBusy THEN
			bDisconnect := FALSE;
			eStep := eCONNECTION_STATE_CLOSE_START;(* Disconnect *)
		ELSE
	
			(* Send tx data *)
			IF NOT bDisconnect AND NOT bSndBusy THEN
				fbTx.RemoveHead( sGet => sTxFrame );(* Remove oldest string entry s*)
				IF fbTx.bOk THEN(* Success *)
					fbSend( bExecute := FALSE );
					fbSend(	sSrvNetID := sSrvNetID, 
							hSocket	:= fbAccept.hSocket,
							pSrc	:= ADR( sTxFrame ),
							cbLen	:= INT_TO_UDINT(LEN( sTxFrame )) (*+ 1*),(* String length inclusive the zero delimiter *)
							bExecute:= TRUE );
					bSndBusy := TRUE;

				END_IF
			ELSE
				fbSend( bExecute := FALSE );
				IF NOT fbSend.bBusy THEN
					bSndBusy := FALSE;
					IF fbSend.bError THEN
						fbLog.Error( sMessage := 'FB_SocketSend()', nErrId := fbSend.nErrId );
						bDisconnect := TRUE;(* Set flag *)
					END_IF
				END_IF
			END_IF
		
		
			(* Get rx data *)
			IF NOT bDisconnect AND NOT bRcvBusy THEN
				fbPollTimer( IN := TRUE );
				IF fbPollTimer.Q THEN
					fbPollTimer( IN := FALSE, PT := ServerControl.PLCPRJ_RECEIVE_POLLING_TIME );
					fbReceive( bExecute := FALSE );
					fbReceive( 	sSrvNetID := sSrvNetID, 
								hSocket	:= fbAccept.hSocket,
								pDest	:= ADR( rxBuffer ) + cbReceived,
								cbLen	:= SIZEOF( rxBuffer ) - cbReceived,
								bExecute:= TRUE );
					bRcvBusy := TRUE;
					
				END_IF
			ELSE
				fbReceive( bExecute := FALSE );
				IF NOT fbReceive.bBusy THEN
					bRcvBusy := FALSE;
					IF NOT fbReceive.bError THEN						
						IF (fbReceive.nRecBytes > 0) THEN(* Bytes received *)
						
							fbPollTimer( IN := FALSE, PT := T#0S ); (* Bytes received => increase the read (polling) speed *)
							fbRequestTimer( IN := FALSE );(* Bytes received => disable timeout check *)
							cbReceived 	:= cbReceived + fbReceive.nRecBytes;(* Calculate the number of received data bytes *)
		
							REPEAT
								
								(* Search for string end delimiter *)
								nLenOfString := 0;(* Reset string length *)
								bEndOfString := FALSE;
								REPEAT 
									IF rxBuffer[nLenOfString] = 3 THEN(* String end delimiter found *)
										bEndOfString := TRUE;

									END_IF
									nLenOfString := nLenOfString + 1;
								UNTIL bEndOfString OR (nLenOfString >= cbReceived)
								END_REPEAT
								
								IF bEndOfString THEN
									MEMSET( ADR( sRxFrame ), 0, SIZEOF( sRxFrame ) );
									MEMCPY(  ADR( sRxFrame ), ADR( rxBuffer ), MIN( SIZEOF(sRxFrame), nLenOfString ) );(* Copy the received string to the output variable (inclusive the end delimiter) *)
									MEMMOVE( ADR( rxBuffer ), ADR( rxBuffer[nLenOfString] ), cbReceived - nLenOfString  );(* Move the reamaining data bytes *)
									cbReceived := cbReceived - nLenOfString;(* Recalculate the reamaining data byte length *)
								
									fbRx.AddTail( sPut := sRxFrame );(* Put received message to the rx fifo *)
									IF NOT fbRx.bOk THEN
										fbLog.Error( sMessage := 'FB_FrameFifo(receiver)', nErrID := ServerControl.PLCPRJ_ERROR_RECFIFO_OVERFLOW );
										bDisconnect := TRUE;(* Set flag *)
										RETURN;
									END_IF
								END_IF

							UNTIL NOT bEndOfString OR (cbReceived = 0)
							END_REPEAT
		
						ELSE(* No bytes received *)
							fbRequestTimer( IN := TRUE, PT := ServerControl.PLCPRJ_RECEIVE_TIMEOUT );(* No bytes received => enable timeout check *)
							IF fbRequestTimer.Q THEN (* Timeout error*)
								fbRequestTimer( IN := FALSE );
								fbLog.Error( sMessage := 'FB_SocketReceive()', nErrID := ServerControl.PLCPRJ_ERROR_RECEIVE_TIMEOUT );
								bDisconnect := TRUE;(* Set flag *)
							END_IF
						END_IF
						
					ELSE(* Receive error *)
						fbLog.Error( sMessage := 'FB_SocketReceive()', nErrId := fbReceive.nErrId );
						bDisconnect := TRUE;(* Set flag *)
					END_IF
				END_IF(* IF NOT fbReceive.bBusy THEN *)
				
			END_IF(* IF NOT bDisconnect AND NOT bRcvBusy THEN *)
		
		END_IF(* IF bDisconnect AND NOT bSndBusy AND NOT bRcvBusy THEN *)
	
	

	eCONNECTION_STATE_CLOSE_START:
		fbLog.Message( sMessage := 'Closing connection!', hSocket := fbAccept.hSocket );
		fbClose( bExecute := FALSE );
		fbClose( sSrvNetID := sSrvNetID, hSocket:= fbAccept.hSocket, bExecute:= TRUE );
		eStep := eCONNECTION_STATE_CLOSE_WAIT;

	eCONNECTION_STATE_CLOSE_WAIT:
		fbClose( bExecute := FALSE );
		IF NOT fbClose.bBusy THEN
			bAccepted := FALSE;
			IF NOT fbClose.bError THEN
				eStep := eCONNECTION_STATE_IDLE;
			ELSE
				fbLog.Error( sMessage := 'FB_SocketClose(accepted)', nErrId := fbClose.nErrId );
				eStep := eCONNECTION_STATE_ERROR;
			END_IF
		END_IF

	eCONNECTION_STATE_ERROR:
		IF bAccepted THEN
			eStep := eCONNECTION_STATE_CLOSE_START;
		ELSE
			eStep := eCONNECTION_STATE_IDLE;
		END_IF

END_CASE
]]></ST>
    </Implementation>
    <LineIds Name="FB_ServerConnection">
      <LineId Id="315" Count="0" />
      <LineId Id="317" Count="0" />
      <LineId Id="316" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="318" Count="0" />
      <LineId Id="320" Count="2" />
      <LineId Id="319" Count="0" />
      <LineId Id="4" Count="16" />
      <LineId Id="22" Count="11" />
      <LineId Id="324" Count="1" />
      <LineId Id="323" Count="0" />
      <LineId Id="34" Count="5" />
      <LineId Id="314" Count="0" />
      <LineId Id="40" Count="3" />
      <LineId Id="327" Count="0" />
      <LineId Id="44" Count="29" />
      <LineId Id="272" Count="0" />
      <LineId Id="74" Count="24" />
      <LineId Id="271" Count="0" />
      <LineId Id="99" Count="19" />
      <LineId Id="227" Count="0" />
      <LineId Id="119" Count="68" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>