<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="FB_FindDestination" Id="{56bb7952-67df-4bb2-8615-b0884b2a1363}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_FindDestination
VAR_IN_OUT
	RoundRobin		:	ST_RoundRobin;
	aDiverts		:	ARRAY[*] OF ST_Divert;
	DestinationID	:	DINT;
END_VAR
VAR_INPUT
	SorterLogEnable	:	UDINT;
END_VAR
VAR_OUTPUT
	DestinationIndex	:	DINT;
	DestinationState	:	DINT;
END_VAR
VAR
	DivertArrayMin		:	DINT;
	DivertArrayMax		:	DINT;
	Last_Enabled	:	UINT;
	IndexCheck		:	DINT;
	sMessage		:	STRING;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Get the upper and lower bounds of the divert array
DivertArrayMin := LOWER_BOUND(aDiverts,1);
DivertArrayMax := UPPER_BOUND(aDiverts,1);

//When a response is received, find the designated Destination
IF DestinationID >= 0 THEN
	IF SorterLogEnable.SORTER_DESTINATION_LU THEN
		sMessage := CONCAT(' Destination: ', DINT_TO_STRING(DestinationID));
		// Write to the Error List
		ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG
			, msgFmtStr := 'Lookup: %s'
			, strArg := sMessage);
	END_IF
	// Check to see if the Destination is defined as a round-robin destination for this sorter
	IF DestinationID = RoundRobin.Destination THEN
		// Test to see if the last enabled round robin destinations are still enabled
		// If they are different, restart the round-robin assignment to accommodate differences 
		IF RoundRobin.Enabled = Last_Enabled THEN
			// Test to see if the round robin assignments have all been met
			// If they have, clear and start over
			IF RoundRobin.Available = RoundRobin.Sent THEN
				RoundRobin.Sent := 0;
			END_IF
		ELSE
			// Capture the new enabled round-robin destinations
			// Restart the round robin assignments
			Last_Enabled := RoundRobin.Enabled;
			RoundRobin.Sent := 0;
		END_IF
		FOR IndexCheck := 0 TO 15 DO
			IF (
			   ((RoundRobin.Enabled AND LREAL_TO_UINT(EXPT(2,IndexCheck))) > 0) 
			   AND ((RoundRobin.Available AND LREAL_TO_UINT(EXPT(2,IndexCheck))) > 0)
			   AND NOT ((RoundRobin.Sent AND LREAL_TO_UINT(EXPT(2,IndexCheck))) > 0))
			   THEN
				RoundRobin.Sent := LREAL_TO_UINT(EXPT(2,IndexCheck)) OR RoundRobin.Sent;
				IF RoundRobin.aDestinations[IndexCheck] >= DivertArrayMin
				   AND RoundRobin.aDestinations[IndexCheck] <= DivertArrayMax
				   THEN
					DestinationIndex := RoundRobin.aDestinations[IndexCheck];
					DestinationID := aDiverts[DestinationIndex].Config.Number;
				ELSE
					DestinationIndex := DivertArrayMax;
				END_IF
				DestinationState := 0;
				EXIT;
			END_IF
		END_FOR
		IF SorterLogEnable.SORTER_DESTINATION_LU THEN
			sMessage := DINT_TO_STRING(DestinationIndex);
			sMessage := CONCAT(' Dest ID: ', DINT_TO_STRING(DestinationID));
			// Write to the Error List
			ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG
				, msgFmtStr := 'RoundRobin Dest: %s'
				, strArg := sMessage);
		END_IF
	ELSE
		DestinationIndex := DivertArrayMax;
		FOR IndexCheck := DivertArrayMin TO DivertArrayMax  DO
			IF aDiverts[IndexCheck].Config.Number = DestinationID THEN
				DestinationIndex := IndexCheck;
				DestinationState := 0;
				EXIT;
			END_IF
		END_FOR
		IF SorterLogEnable.SORTER_DESTINATION_LU THEN
			sMessage := DINT_TO_STRING(DestinationIndex);
			sMessage := CONCAT(' Dest ID: ', DINT_TO_STRING(DestinationID));
			// Write to the Error List
			ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG
				, msgFmtStr := 'Lookup Dest: %s'
				, strArg := sMessage);
		END_IF
	END_IF
END_IF]]></ST>
    </Implementation>
    <LineIds Name="FB_FindDestination">
      <LineId Id="94" Count="0" />
      <LineId Id="96" Count="1" />
      <LineId Id="95" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="166" Count="1" />
      <LineId Id="170" Count="4" />
      <LineId Id="103" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="104" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="106" Count="1" />
      <LineId Id="14" Count="3" />
      <LineId Id="108" Count="1" />
      <LineId Id="18" Count="2" />
      <LineId Id="110" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="116" Count="1" />
      <LineId Id="124" Count="0" />
      <LineId Id="136" Count="1" />
      <LineId Id="142" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="176" Count="1" />
      <LineId Id="183" Count="0" />
      <LineId Id="178" Count="4" />
      <LineId Id="131" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="50" Count="2" />
      <LineId Id="134" Count="0" />
      <LineId Id="58" Count="2" />
      <LineId Id="184" Count="7" />
      <LineId Id="130" Count="0" />
      <LineId Id="78" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>